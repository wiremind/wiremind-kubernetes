"""
This type stub file was generated by pyright.
"""

HAS_KUBERNETES_VALIDATE = ...
__all__ = ['DynamicClient', 'ResourceInstance', 'Resource', 'ResourceList', 'Subresource', 'EagerDiscoverer', 'LazyDiscoverer', 'ResourceField']
def meta_request(func): # -> Callable[..., Any]:
    """ Handles parsing response structure and translating API Exceptions """
    ...

class DynamicClient:
    """ A kubernetes client that dynamically discovers and interacts with
        the kubernetes API
    """
    def __init__(self, client, cache_file=..., discoverer=...) -> None:
        ...
    
    @property
    def resources(self): # -> LazyDiscoverer:
        ...
    
    @property
    def version(self): # -> str | Any:
        ...
    
    def ensure_namespace(self, resource, namespace, body):
        ...
    
    def serialize_body(self, body): # -> dict[Any, Any]:
        """Serialize body to raw dict so apiserver can handle it

        :param body: kubernetes resource body, current support: Union[Dict, ResourceInstance]
        """
        ...
    
    def get(self, resource, name=..., namespace=..., **kwargs):
        ...
    
    def create(self, resource, body=..., namespace=..., **kwargs):
        ...
    
    def delete(self, resource, name=..., namespace=..., body=..., label_selector=..., field_selector=..., **kwargs):
        ...
    
    def replace(self, resource, body=..., name=..., namespace=..., **kwargs):
        ...
    
    def patch(self, resource, body=..., name=..., namespace=..., **kwargs):
        ...
    
    def server_side_apply(self, resource, body=..., name=..., namespace=..., force_conflicts=..., **kwargs):
        ...
    
    def watch(self, resource, namespace=..., name=..., label_selector=..., field_selector=..., resource_version=..., timeout=..., watcher=...): # -> Generator[Any | dict[Any, Any] | str, Any, None]:
        """
        Stream events for a resource from the Kubernetes API

        :param resource: The API resource object that will be used to query the API
        :param namespace: The namespace to query
        :param name: The name of the resource instance to query
        :param label_selector: The label selector with which to filter results
        :param field_selector: The field selector with which to filter results
        :param resource_version: The version with which to filter results. Only events with
                                 a resource_version greater than this value will be returned
        :param timeout: The amount of time in seconds to wait before terminating the stream
        :param watcher: The Watcher object that will be used to stream the resource

        :return: Event object with these keys:
                   'type': The type of event such as "ADDED", "DELETED", etc.
                   'raw_object': a dict representing the watched object.
                   'object': A ResourceInstance wrapping raw_object.

        Example:
            client = DynamicClient(k8s_client)
            watcher = watch.Watch()
            v1_pods = client.resources.get(api_version='v1', kind='Pod')

            for e in v1_pods.watch(resource_version=0, namespace=default, timeout=5, watcher=watcher):
                print(e['type'])
                print(e['object'].metadata)
                # If you want to gracefully stop the stream watcher
                watcher.stop()
        """
        ...
    
    @meta_request
    def request(self, method, path, body=..., **params):
        ...
    
    def validate(self, definition, version=..., strict=...): # -> tuple[list[Any], list[Any]]:
        """validate checks a kubernetes resource definition

        Args:
            definition (dict): resource definition
            version (str): version of kubernetes to validate against
            strict (bool): whether unexpected additional properties should be considered errors

        Returns:
            warnings (list), errors (list): warnings are missing validations, errors are validation failures
        """
        ...
    


