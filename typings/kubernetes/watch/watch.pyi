"""
This type stub file was generated by pyright.
"""

PYDOC_RETURN_LABEL = ...
PYDOC_FOLLOW_PARAM = ...
TYPE_LIST_SUFFIX = ...
PY2 = ...
if PY2:
    HTTP_STATUS_GONE = ...
else:
    HTTP_STATUS_GONE = ...
class SimpleNamespace:
    def __init__(self, **kwargs) -> None:
        ...
    


def iter_resp_lines(resp): # -> Generator[str | Any, Any, None]:
    ...

class Watch:
    def __init__(self, return_type=...) -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def get_return_type(self, func): # -> str:
        ...
    
    def get_watch_argument_name(self, func): # -> Literal['follow', 'watch']:
        ...
    
    def unmarshal_event(self, data, return_type): # -> Any:
        ...
    
    def stream(self, func, *args, **kwargs): # -> Generator[Any | dict[Any, Any] | str, Any, None]:
        """Watch an API resource and stream the result back via a generator.

        Note that watching an API resource can expire. The method tries to
        resume automatically once from the last result, but if that last result
        is too old as well, an `ApiException` exception will be thrown with
        ``code`` 410. In that case you have to recover yourself, probably
        by listing the API resource to obtain the latest state and then
        watching from that state on by setting ``resource_version`` to
        one returned from listing.

        :param func: The API function pointer. Any parameter to the function
                     can be passed after this parameter.

        :return: Event object with these keys:
                   'type': The type of event such as "ADDED", "DELETED", etc.
                   'raw_object': a dict representing the watched object.
                   'object': A model representation of raw_object. The name of
                             model will be determined based on
                             the func's doc string. If it cannot be determined,
                             'object' value will be the same as 'raw_object'.

        Example:
            v1 = kubernetes.client.CoreV1Api()
            watch = kubernetes.watch.Watch()
            for e in watch.stream(v1.list_namespace, resource_version=1127):
                type = e['type']
                object = e['object']  # object is one of type return_type
                raw_object = e['raw_object']  # raw_object is a dict
                ...
                if should_stop:
                    watch.stop()
        """
        ...
    


