"""
This type stub file was generated by pyright.
"""

STDIN_CHANNEL = ...
STDOUT_CHANNEL = ...
STDERR_CHANNEL = ...
ERROR_CHANNEL = ...
RESIZE_CHANNEL = ...
class _IgnoredIO:
    def write(self, _x): # -> None:
        ...
    
    def getvalue(self):
        ...
    


class WSClient:
    def __init__(self, configuration, url, headers, capture_all) -> None:
        """A websocket client with support for channels.

            Exec command uses different channels for different streams. for
        example, 0 is stdin, 1 is stdout and 2 is stderr. Some other API calls
        like port forwarding can forward different pods' streams to different
        channels.
        """
        ...
    
    def peek_channel(self, channel, timeout=...): # -> Literal['']:
        """Peek a channel and return part of the input,
        empty string otherwise."""
        ...
    
    def read_channel(self, channel, timeout=...): # -> Literal['']:
        """Read data from a channel."""
        ...
    
    def readline_channel(self, channel, timeout=...): # -> None:
        """Read a line from a channel."""
        ...
    
    def write_channel(self, channel, data): # -> None:
        """Write data to a channel."""
        ...
    
    def peek_stdout(self, timeout=...): # -> Literal['']:
        """Same as peek_channel with channel=1."""
        ...
    
    def read_stdout(self, timeout=...): # -> Literal['']:
        """Same as read_channel with channel=1."""
        ...
    
    def readline_stdout(self, timeout=...): # -> None:
        """Same as readline_channel with channel=1."""
        ...
    
    def peek_stderr(self, timeout=...): # -> Literal['']:
        """Same as peek_channel with channel=2."""
        ...
    
    def read_stderr(self, timeout=...): # -> Literal['']:
        """Same as read_channel with channel=2."""
        ...
    
    def readline_stderr(self, timeout=...): # -> None:
        """Same as readline_channel with channel=2."""
        ...
    
    def read_all(self): # -> str:
        """Return buffered data received on stdout and stderr channels.
        This is useful for non-interactive call where a set of command passed
        to the API call and their result is needed after the call is concluded.
        Should be called after run_forever() or update()

        TODO: Maybe we can process this and return a more meaningful map with
        channels mapped for each input.
        """
        ...
    
    def is_open(self): # -> bool:
        """True if the connection is still alive."""
        ...
    
    def write_stdin(self, data): # -> None:
        """The same as write_channel with channel=0."""
        ...
    
    def update(self, timeout=...): # -> None:
        """Update channel buffers with at most one complete frame of input."""
        ...
    
    def run_forever(self, timeout=...): # -> None:
        """Wait till connection is closed or timeout reached. Buffer any input
        received during this time."""
        ...
    
    @property
    def returncode(self): # -> int | None:
        """
        The return code, A None value indicates that the process hasn't
        terminated yet.
        """
        ...
    
    def close(self, **kwargs): # -> None:
        """
        close websocket connection.
        """
        ...
    


WSResponse = ...
class PortForward:
    def __init__(self, websocket, ports) -> None:
        """A websocket client with support for port forwarding.

        Port Forward command sends on 2 channels per port, a read/write
        data channel and a read only error channel. Both channels are sent an
        initial frame contaning the port number that channel is associated with.
        """
        ...
    
    @property
    def connected(self):
        ...
    
    def socket(self, port_number):
        ...
    
    def error(self, port_number):
        ...
    
    def close(self): # -> None:
        ...
    
    class _Port:
        def __init__(self, ix, port_number) -> None:
            ...
        
        class _Socket:
            def __init__(self, socket) -> None:
                ...
            
            def __getattr__(self, name): # -> Any:
                ...
            
            def setsockopt(self, level, optname, value): # -> None:
                ...
            
        
        
    
    


def get_websocket_url(url, query_params=...): # -> Literal[b""]:
    ...

def create_websocket(configuration, url, headers=...): # -> WebSocket:
    ...

def websocket_proxycare(connect_opt, configuration, url, headers):
    """ An internal function to be called in api-client when a websocket
        create is requested.
    """
    ...

def websocket_call(configuration, _method, url, **kwargs): # -> WSClient | WSResponse:
    """An internal function to be called in api-client when a websocket
    connection is required. method, url, and kwargs are the parameters of
    apiClient.request method."""
    ...

def portforward_call(configuration, _method, url, **kwargs): # -> PortForward:
    """An internal function to be called in api-client when a websocket
    connection is required for port forwarding. args and kwargs are the
    parameters of apiClient.request method."""
    ...

