"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1JSONSchemaProps:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, ref=..., schema=..., additional_items=..., additional_properties=..., all_of=..., any_of=..., default=..., definitions=..., dependencies=..., description=..., enum=..., example=..., exclusive_maximum=..., exclusive_minimum=..., external_docs=..., format=..., id=..., items=..., max_items=..., max_length=..., max_properties=..., maximum=..., min_items=..., min_length=..., min_properties=..., minimum=..., multiple_of=..., _not=..., nullable=..., one_of=..., pattern=..., pattern_properties=..., properties=..., required=..., title=..., type=..., unique_items=..., x_kubernetes_embedded_resource=..., x_kubernetes_int_or_string=..., x_kubernetes_list_map_keys=..., x_kubernetes_list_type=..., x_kubernetes_map_type=..., x_kubernetes_preserve_unknown_fields=..., x_kubernetes_validations=..., local_vars_configuration=...) -> None:
        """V1JSONSchemaProps - a model defined in OpenAPI"""
        ...
    
    @property
    def ref(self): # -> None:
        """Gets the ref of this V1JSONSchemaProps.  # noqa: E501


        :return: The ref of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @ref.setter
    def ref(self, ref): # -> None:
        """Sets the ref of this V1JSONSchemaProps.


        :param ref: The ref of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def schema(self): # -> None:
        """Gets the schema of this V1JSONSchemaProps.  # noqa: E501


        :return: The schema of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @schema.setter
    def schema(self, schema): # -> None:
        """Sets the schema of this V1JSONSchemaProps.


        :param schema: The schema of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def additional_items(self): # -> None:
        """Gets the additional_items of this V1JSONSchemaProps.  # noqa: E501

        JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.  # noqa: E501

        :return: The additional_items of this V1JSONSchemaProps.  # noqa: E501
        :rtype: object
        """
        ...
    
    @additional_items.setter
    def additional_items(self, additional_items): # -> None:
        """Sets the additional_items of this V1JSONSchemaProps.

        JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.  # noqa: E501

        :param additional_items: The additional_items of this V1JSONSchemaProps.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def additional_properties(self): # -> None:
        """Gets the additional_properties of this V1JSONSchemaProps.  # noqa: E501

        JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.  # noqa: E501

        :return: The additional_properties of this V1JSONSchemaProps.  # noqa: E501
        :rtype: object
        """
        ...
    
    @additional_properties.setter
    def additional_properties(self, additional_properties): # -> None:
        """Sets the additional_properties of this V1JSONSchemaProps.

        JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.  # noqa: E501

        :param additional_properties: The additional_properties of this V1JSONSchemaProps.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def all_of(self): # -> None:
        """Gets the all_of of this V1JSONSchemaProps.  # noqa: E501


        :return: The all_of of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[V1JSONSchemaProps]
        """
        ...
    
    @all_of.setter
    def all_of(self, all_of): # -> None:
        """Sets the all_of of this V1JSONSchemaProps.


        :param all_of: The all_of of this V1JSONSchemaProps.  # noqa: E501
        :type: list[V1JSONSchemaProps]
        """
        ...
    
    @property
    def any_of(self): # -> None:
        """Gets the any_of of this V1JSONSchemaProps.  # noqa: E501


        :return: The any_of of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[V1JSONSchemaProps]
        """
        ...
    
    @any_of.setter
    def any_of(self, any_of): # -> None:
        """Sets the any_of of this V1JSONSchemaProps.


        :param any_of: The any_of of this V1JSONSchemaProps.  # noqa: E501
        :type: list[V1JSONSchemaProps]
        """
        ...
    
    @property
    def default(self): # -> None:
        """Gets the default of this V1JSONSchemaProps.  # noqa: E501

        default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.  # noqa: E501

        :return: The default of this V1JSONSchemaProps.  # noqa: E501
        :rtype: object
        """
        ...
    
    @default.setter
    def default(self, default): # -> None:
        """Sets the default of this V1JSONSchemaProps.

        default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.  # noqa: E501

        :param default: The default of this V1JSONSchemaProps.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def definitions(self): # -> None:
        """Gets the definitions of this V1JSONSchemaProps.  # noqa: E501


        :return: The definitions of this V1JSONSchemaProps.  # noqa: E501
        :rtype: dict(str, V1JSONSchemaProps)
        """
        ...
    
    @definitions.setter
    def definitions(self, definitions): # -> None:
        """Sets the definitions of this V1JSONSchemaProps.


        :param definitions: The definitions of this V1JSONSchemaProps.  # noqa: E501
        :type: dict(str, V1JSONSchemaProps)
        """
        ...
    
    @property
    def dependencies(self): # -> None:
        """Gets the dependencies of this V1JSONSchemaProps.  # noqa: E501


        :return: The dependencies of this V1JSONSchemaProps.  # noqa: E501
        :rtype: dict(str, object)
        """
        ...
    
    @dependencies.setter
    def dependencies(self, dependencies): # -> None:
        """Sets the dependencies of this V1JSONSchemaProps.


        :param dependencies: The dependencies of this V1JSONSchemaProps.  # noqa: E501
        :type: dict(str, object)
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this V1JSONSchemaProps.  # noqa: E501


        :return: The description of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this V1JSONSchemaProps.


        :param description: The description of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def enum(self): # -> None:
        """Gets the enum of this V1JSONSchemaProps.  # noqa: E501


        :return: The enum of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[object]
        """
        ...
    
    @enum.setter
    def enum(self, enum): # -> None:
        """Sets the enum of this V1JSONSchemaProps.


        :param enum: The enum of this V1JSONSchemaProps.  # noqa: E501
        :type: list[object]
        """
        ...
    
    @property
    def example(self): # -> None:
        """Gets the example of this V1JSONSchemaProps.  # noqa: E501

        JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.  # noqa: E501

        :return: The example of this V1JSONSchemaProps.  # noqa: E501
        :rtype: object
        """
        ...
    
    @example.setter
    def example(self, example): # -> None:
        """Sets the example of this V1JSONSchemaProps.

        JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.  # noqa: E501

        :param example: The example of this V1JSONSchemaProps.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def exclusive_maximum(self): # -> None:
        """Gets the exclusive_maximum of this V1JSONSchemaProps.  # noqa: E501


        :return: The exclusive_maximum of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum): # -> None:
        """Sets the exclusive_maximum of this V1JSONSchemaProps.


        :param exclusive_maximum: The exclusive_maximum of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def exclusive_minimum(self): # -> None:
        """Gets the exclusive_minimum of this V1JSONSchemaProps.  # noqa: E501


        :return: The exclusive_minimum of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum): # -> None:
        """Sets the exclusive_minimum of this V1JSONSchemaProps.


        :param exclusive_minimum: The exclusive_minimum of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def external_docs(self): # -> None:
        """Gets the external_docs of this V1JSONSchemaProps.  # noqa: E501


        :return: The external_docs of this V1JSONSchemaProps.  # noqa: E501
        :rtype: V1ExternalDocumentation
        """
        ...
    
    @external_docs.setter
    def external_docs(self, external_docs): # -> None:
        """Sets the external_docs of this V1JSONSchemaProps.


        :param external_docs: The external_docs of this V1JSONSchemaProps.  # noqa: E501
        :type: V1ExternalDocumentation
        """
        ...
    
    @property
    def format(self): # -> None:
        """Gets the format of this V1JSONSchemaProps.  # noqa: E501

        format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.  # noqa: E501

        :return: The format of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @format.setter
    def format(self, format): # -> None:
        """Sets the format of this V1JSONSchemaProps.

        format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.  # noqa: E501

        :param format: The format of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this V1JSONSchemaProps.  # noqa: E501


        :return: The id of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this V1JSONSchemaProps.


        :param id: The id of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def items(self): # -> None:
        """Gets the items of this V1JSONSchemaProps.  # noqa: E501

        JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.  # noqa: E501

        :return: The items of this V1JSONSchemaProps.  # noqa: E501
        :rtype: object
        """
        ...
    
    @items.setter
    def items(self, items): # -> None:
        """Sets the items of this V1JSONSchemaProps.

        JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.  # noqa: E501

        :param items: The items of this V1JSONSchemaProps.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def max_items(self): # -> None:
        """Gets the max_items of this V1JSONSchemaProps.  # noqa: E501


        :return: The max_items of this V1JSONSchemaProps.  # noqa: E501
        :rtype: int
        """
        ...
    
    @max_items.setter
    def max_items(self, max_items): # -> None:
        """Sets the max_items of this V1JSONSchemaProps.


        :param max_items: The max_items of this V1JSONSchemaProps.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def max_length(self): # -> None:
        """Gets the max_length of this V1JSONSchemaProps.  # noqa: E501


        :return: The max_length of this V1JSONSchemaProps.  # noqa: E501
        :rtype: int
        """
        ...
    
    @max_length.setter
    def max_length(self, max_length): # -> None:
        """Sets the max_length of this V1JSONSchemaProps.


        :param max_length: The max_length of this V1JSONSchemaProps.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def max_properties(self): # -> None:
        """Gets the max_properties of this V1JSONSchemaProps.  # noqa: E501


        :return: The max_properties of this V1JSONSchemaProps.  # noqa: E501
        :rtype: int
        """
        ...
    
    @max_properties.setter
    def max_properties(self, max_properties): # -> None:
        """Sets the max_properties of this V1JSONSchemaProps.


        :param max_properties: The max_properties of this V1JSONSchemaProps.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def maximum(self): # -> None:
        """Gets the maximum of this V1JSONSchemaProps.  # noqa: E501


        :return: The maximum of this V1JSONSchemaProps.  # noqa: E501
        :rtype: float
        """
        ...
    
    @maximum.setter
    def maximum(self, maximum): # -> None:
        """Sets the maximum of this V1JSONSchemaProps.


        :param maximum: The maximum of this V1JSONSchemaProps.  # noqa: E501
        :type: float
        """
        ...
    
    @property
    def min_items(self): # -> None:
        """Gets the min_items of this V1JSONSchemaProps.  # noqa: E501


        :return: The min_items of this V1JSONSchemaProps.  # noqa: E501
        :rtype: int
        """
        ...
    
    @min_items.setter
    def min_items(self, min_items): # -> None:
        """Sets the min_items of this V1JSONSchemaProps.


        :param min_items: The min_items of this V1JSONSchemaProps.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def min_length(self): # -> None:
        """Gets the min_length of this V1JSONSchemaProps.  # noqa: E501


        :return: The min_length of this V1JSONSchemaProps.  # noqa: E501
        :rtype: int
        """
        ...
    
    @min_length.setter
    def min_length(self, min_length): # -> None:
        """Sets the min_length of this V1JSONSchemaProps.


        :param min_length: The min_length of this V1JSONSchemaProps.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def min_properties(self): # -> None:
        """Gets the min_properties of this V1JSONSchemaProps.  # noqa: E501


        :return: The min_properties of this V1JSONSchemaProps.  # noqa: E501
        :rtype: int
        """
        ...
    
    @min_properties.setter
    def min_properties(self, min_properties): # -> None:
        """Sets the min_properties of this V1JSONSchemaProps.


        :param min_properties: The min_properties of this V1JSONSchemaProps.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def minimum(self): # -> None:
        """Gets the minimum of this V1JSONSchemaProps.  # noqa: E501


        :return: The minimum of this V1JSONSchemaProps.  # noqa: E501
        :rtype: float
        """
        ...
    
    @minimum.setter
    def minimum(self, minimum): # -> None:
        """Sets the minimum of this V1JSONSchemaProps.


        :param minimum: The minimum of this V1JSONSchemaProps.  # noqa: E501
        :type: float
        """
        ...
    
    @property
    def multiple_of(self): # -> None:
        """Gets the multiple_of of this V1JSONSchemaProps.  # noqa: E501


        :return: The multiple_of of this V1JSONSchemaProps.  # noqa: E501
        :rtype: float
        """
        ...
    
    @multiple_of.setter
    def multiple_of(self, multiple_of): # -> None:
        """Sets the multiple_of of this V1JSONSchemaProps.


        :param multiple_of: The multiple_of of this V1JSONSchemaProps.  # noqa: E501
        :type: float
        """
        ...
    
    @property
    def nullable(self): # -> None:
        """Gets the nullable of this V1JSONSchemaProps.  # noqa: E501


        :return: The nullable of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @nullable.setter
    def nullable(self, nullable): # -> None:
        """Sets the nullable of this V1JSONSchemaProps.


        :param nullable: The nullable of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def one_of(self): # -> None:
        """Gets the one_of of this V1JSONSchemaProps.  # noqa: E501


        :return: The one_of of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[V1JSONSchemaProps]
        """
        ...
    
    @one_of.setter
    def one_of(self, one_of): # -> None:
        """Sets the one_of of this V1JSONSchemaProps.


        :param one_of: The one_of of this V1JSONSchemaProps.  # noqa: E501
        :type: list[V1JSONSchemaProps]
        """
        ...
    
    @property
    def pattern(self): # -> None:
        """Gets the pattern of this V1JSONSchemaProps.  # noqa: E501


        :return: The pattern of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @pattern.setter
    def pattern(self, pattern): # -> None:
        """Sets the pattern of this V1JSONSchemaProps.


        :param pattern: The pattern of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def pattern_properties(self): # -> None:
        """Gets the pattern_properties of this V1JSONSchemaProps.  # noqa: E501


        :return: The pattern_properties of this V1JSONSchemaProps.  # noqa: E501
        :rtype: dict(str, V1JSONSchemaProps)
        """
        ...
    
    @pattern_properties.setter
    def pattern_properties(self, pattern_properties): # -> None:
        """Sets the pattern_properties of this V1JSONSchemaProps.


        :param pattern_properties: The pattern_properties of this V1JSONSchemaProps.  # noqa: E501
        :type: dict(str, V1JSONSchemaProps)
        """
        ...
    
    @property
    def properties(self): # -> None:
        """Gets the properties of this V1JSONSchemaProps.  # noqa: E501


        :return: The properties of this V1JSONSchemaProps.  # noqa: E501
        :rtype: dict(str, V1JSONSchemaProps)
        """
        ...
    
    @properties.setter
    def properties(self, properties): # -> None:
        """Sets the properties of this V1JSONSchemaProps.


        :param properties: The properties of this V1JSONSchemaProps.  # noqa: E501
        :type: dict(str, V1JSONSchemaProps)
        """
        ...
    
    @property
    def required(self): # -> None:
        """Gets the required of this V1JSONSchemaProps.  # noqa: E501


        :return: The required of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @required.setter
    def required(self, required): # -> None:
        """Sets the required of this V1JSONSchemaProps.


        :param required: The required of this V1JSONSchemaProps.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def title(self): # -> None:
        """Gets the title of this V1JSONSchemaProps.  # noqa: E501


        :return: The title of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @title.setter
    def title(self, title): # -> None:
        """Sets the title of this V1JSONSchemaProps.


        :param title: The title of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this V1JSONSchemaProps.  # noqa: E501


        :return: The type of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this V1JSONSchemaProps.


        :param type: The type of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def unique_items(self): # -> None:
        """Gets the unique_items of this V1JSONSchemaProps.  # noqa: E501


        :return: The unique_items of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @unique_items.setter
    def unique_items(self, unique_items): # -> None:
        """Sets the unique_items of this V1JSONSchemaProps.


        :param unique_items: The unique_items of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def x_kubernetes_embedded_resource(self): # -> None:
        """Gets the x_kubernetes_embedded_resource of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).  # noqa: E501

        :return: The x_kubernetes_embedded_resource of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @x_kubernetes_embedded_resource.setter
    def x_kubernetes_embedded_resource(self, x_kubernetes_embedded_resource): # -> None:
        """Sets the x_kubernetes_embedded_resource of this V1JSONSchemaProps.

        x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).  # noqa: E501

        :param x_kubernetes_embedded_resource: The x_kubernetes_embedded_resource of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def x_kubernetes_int_or_string(self): # -> None:
        """Gets the x_kubernetes_int_or_string of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:  1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more  # noqa: E501

        :return: The x_kubernetes_int_or_string of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @x_kubernetes_int_or_string.setter
    def x_kubernetes_int_or_string(self, x_kubernetes_int_or_string): # -> None:
        """Sets the x_kubernetes_int_or_string of this V1JSONSchemaProps.

        x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:  1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more  # noqa: E501

        :param x_kubernetes_int_or_string: The x_kubernetes_int_or_string of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def x_kubernetes_list_map_keys(self): # -> None:
        """Gets the x_kubernetes_list_map_keys of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.  This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).  The properties specified must either be required or have a default value, to ensure those properties are present for all list items.  # noqa: E501

        :return: The x_kubernetes_list_map_keys of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @x_kubernetes_list_map_keys.setter
    def x_kubernetes_list_map_keys(self, x_kubernetes_list_map_keys): # -> None:
        """Sets the x_kubernetes_list_map_keys of this V1JSONSchemaProps.

        x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.  This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).  The properties specified must either be required or have a default value, to ensure those properties are present for all list items.  # noqa: E501

        :param x_kubernetes_list_map_keys: The x_kubernetes_list_map_keys of this V1JSONSchemaProps.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def x_kubernetes_list_type(self): # -> None:
        """Gets the x_kubernetes_list_type of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:  1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.  # noqa: E501

        :return: The x_kubernetes_list_type of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @x_kubernetes_list_type.setter
    def x_kubernetes_list_type(self, x_kubernetes_list_type): # -> None:
        """Sets the x_kubernetes_list_type of this V1JSONSchemaProps.

        x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:  1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.  # noqa: E501

        :param x_kubernetes_list_type: The x_kubernetes_list_type of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def x_kubernetes_map_type(self): # -> None:
        """Gets the x_kubernetes_map_type of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:  1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.  # noqa: E501

        :return: The x_kubernetes_map_type of this V1JSONSchemaProps.  # noqa: E501
        :rtype: str
        """
        ...
    
    @x_kubernetes_map_type.setter
    def x_kubernetes_map_type(self, x_kubernetes_map_type): # -> None:
        """Sets the x_kubernetes_map_type of this V1JSONSchemaProps.

        x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:  1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.  # noqa: E501

        :param x_kubernetes_map_type: The x_kubernetes_map_type of this V1JSONSchemaProps.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def x_kubernetes_preserve_unknown_fields(self): # -> None:
        """Gets the x_kubernetes_preserve_unknown_fields of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.  # noqa: E501

        :return: The x_kubernetes_preserve_unknown_fields of this V1JSONSchemaProps.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @x_kubernetes_preserve_unknown_fields.setter
    def x_kubernetes_preserve_unknown_fields(self, x_kubernetes_preserve_unknown_fields): # -> None:
        """Sets the x_kubernetes_preserve_unknown_fields of this V1JSONSchemaProps.

        x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.  # noqa: E501

        :param x_kubernetes_preserve_unknown_fields: The x_kubernetes_preserve_unknown_fields of this V1JSONSchemaProps.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def x_kubernetes_validations(self): # -> None:
        """Gets the x_kubernetes_validations of this V1JSONSchemaProps.  # noqa: E501

        x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.  # noqa: E501

        :return: The x_kubernetes_validations of this V1JSONSchemaProps.  # noqa: E501
        :rtype: list[V1ValidationRule]
        """
        ...
    
    @x_kubernetes_validations.setter
    def x_kubernetes_validations(self, x_kubernetes_validations): # -> None:
        """Sets the x_kubernetes_validations of this V1JSONSchemaProps.

        x-kubernetes-validations describes a list of validation rules written in the CEL expression language. This field is an alpha-level. Using this field requires the feature gate `CustomResourceValidationExpressions` to be enabled.  # noqa: E501

        :param x_kubernetes_validations: The x_kubernetes_validations of this V1JSONSchemaProps.  # noqa: E501
        :type: list[V1ValidationRule]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


