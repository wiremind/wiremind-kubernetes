"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1SecurityContext:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, allow_privilege_escalation=..., capabilities=..., privileged=..., proc_mount=..., read_only_root_filesystem=..., run_as_group=..., run_as_non_root=..., run_as_user=..., se_linux_options=..., seccomp_profile=..., windows_options=..., local_vars_configuration=...) -> None:
        """V1SecurityContext - a model defined in OpenAPI"""
        ...
    
    @property
    def allow_privilege_escalation(self): # -> None:
        """Gets the allow_privilege_escalation of this V1SecurityContext.  # noqa: E501

        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The allow_privilege_escalation of this V1SecurityContext.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, allow_privilege_escalation): # -> None:
        """Sets the allow_privilege_escalation of this V1SecurityContext.

        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param allow_privilege_escalation: The allow_privilege_escalation of this V1SecurityContext.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def capabilities(self): # -> None:
        """Gets the capabilities of this V1SecurityContext.  # noqa: E501


        :return: The capabilities of this V1SecurityContext.  # noqa: E501
        :rtype: V1Capabilities
        """
        ...
    
    @capabilities.setter
    def capabilities(self, capabilities): # -> None:
        """Sets the capabilities of this V1SecurityContext.


        :param capabilities: The capabilities of this V1SecurityContext.  # noqa: E501
        :type: V1Capabilities
        """
        ...
    
    @property
    def privileged(self): # -> None:
        """Gets the privileged of this V1SecurityContext.  # noqa: E501

        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The privileged of this V1SecurityContext.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @privileged.setter
    def privileged(self, privileged): # -> None:
        """Sets the privileged of this V1SecurityContext.

        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param privileged: The privileged of this V1SecurityContext.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def proc_mount(self): # -> None:
        """Gets the proc_mount of this V1SecurityContext.  # noqa: E501

        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The proc_mount of this V1SecurityContext.  # noqa: E501
        :rtype: str
        """
        ...
    
    @proc_mount.setter
    def proc_mount(self, proc_mount): # -> None:
        """Sets the proc_mount of this V1SecurityContext.

        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param proc_mount: The proc_mount of this V1SecurityContext.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def read_only_root_filesystem(self): # -> None:
        """Gets the read_only_root_filesystem of this V1SecurityContext.  # noqa: E501

        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The read_only_root_filesystem of this V1SecurityContext.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, read_only_root_filesystem): # -> None:
        """Sets the read_only_root_filesystem of this V1SecurityContext.

        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param read_only_root_filesystem: The read_only_root_filesystem of this V1SecurityContext.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def run_as_group(self): # -> None:
        """Gets the run_as_group of this V1SecurityContext.  # noqa: E501

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The run_as_group of this V1SecurityContext.  # noqa: E501
        :rtype: int
        """
        ...
    
    @run_as_group.setter
    def run_as_group(self, run_as_group): # -> None:
        """Sets the run_as_group of this V1SecurityContext.

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param run_as_group: The run_as_group of this V1SecurityContext.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def run_as_non_root(self): # -> None:
        """Gets the run_as_non_root of this V1SecurityContext.  # noqa: E501

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The run_as_non_root of this V1SecurityContext.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @run_as_non_root.setter
    def run_as_non_root(self, run_as_non_root): # -> None:
        """Sets the run_as_non_root of this V1SecurityContext.

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param run_as_non_root: The run_as_non_root of this V1SecurityContext.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def run_as_user(self): # -> None:
        """Gets the run_as_user of this V1SecurityContext.  # noqa: E501

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The run_as_user of this V1SecurityContext.  # noqa: E501
        :rtype: int
        """
        ...
    
    @run_as_user.setter
    def run_as_user(self, run_as_user): # -> None:
        """Sets the run_as_user of this V1SecurityContext.

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param run_as_user: The run_as_user of this V1SecurityContext.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def se_linux_options(self): # -> None:
        """Gets the se_linux_options of this V1SecurityContext.  # noqa: E501


        :return: The se_linux_options of this V1SecurityContext.  # noqa: E501
        :rtype: V1SELinuxOptions
        """
        ...
    
    @se_linux_options.setter
    def se_linux_options(self, se_linux_options): # -> None:
        """Sets the se_linux_options of this V1SecurityContext.


        :param se_linux_options: The se_linux_options of this V1SecurityContext.  # noqa: E501
        :type: V1SELinuxOptions
        """
        ...
    
    @property
    def seccomp_profile(self): # -> None:
        """Gets the seccomp_profile of this V1SecurityContext.  # noqa: E501


        :return: The seccomp_profile of this V1SecurityContext.  # noqa: E501
        :rtype: V1SeccompProfile
        """
        ...
    
    @seccomp_profile.setter
    def seccomp_profile(self, seccomp_profile): # -> None:
        """Sets the seccomp_profile of this V1SecurityContext.


        :param seccomp_profile: The seccomp_profile of this V1SecurityContext.  # noqa: E501
        :type: V1SeccompProfile
        """
        ...
    
    @property
    def windows_options(self): # -> None:
        """Gets the windows_options of this V1SecurityContext.  # noqa: E501


        :return: The windows_options of this V1SecurityContext.  # noqa: E501
        :rtype: V1WindowsSecurityContextOptions
        """
        ...
    
    @windows_options.setter
    def windows_options(self, windows_options): # -> None:
        """Sets the windows_options of this V1SecurityContext.


        :param windows_options: The windows_options of this V1SecurityContext.  # noqa: E501
        :type: V1WindowsSecurityContextOptions
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


