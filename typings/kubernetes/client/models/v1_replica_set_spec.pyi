"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ReplicaSetSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, min_ready_seconds=..., replicas=..., selector=..., template=..., local_vars_configuration=...) -> None:
        """V1ReplicaSetSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def min_ready_seconds(self): # -> None:
        """Gets the min_ready_seconds of this V1ReplicaSetSpec.  # noqa: E501

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)  # noqa: E501

        :return: The min_ready_seconds of this V1ReplicaSetSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds): # -> None:
        """Sets the min_ready_seconds of this V1ReplicaSetSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)  # noqa: E501

        :param min_ready_seconds: The min_ready_seconds of this V1ReplicaSetSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def replicas(self): # -> None:
        """Gets the replicas of this V1ReplicaSetSpec.  # noqa: E501

        Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller  # noqa: E501

        :return: The replicas of this V1ReplicaSetSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @replicas.setter
    def replicas(self, replicas): # -> None:
        """Sets the replicas of this V1ReplicaSetSpec.

        Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller  # noqa: E501

        :param replicas: The replicas of this V1ReplicaSetSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def selector(self): # -> None:
        """Gets the selector of this V1ReplicaSetSpec.  # noqa: E501


        :return: The selector of this V1ReplicaSetSpec.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @selector.setter
    def selector(self, selector): # -> None:
        """Sets the selector of this V1ReplicaSetSpec.


        :param selector: The selector of this V1ReplicaSetSpec.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def template(self): # -> None:
        """Gets the template of this V1ReplicaSetSpec.  # noqa: E501


        :return: The template of this V1ReplicaSetSpec.  # noqa: E501
        :rtype: V1PodTemplateSpec
        """
        ...
    
    @template.setter
    def template(self, template): # -> None:
        """Sets the template of this V1ReplicaSetSpec.


        :param template: The template of this V1ReplicaSetSpec.  # noqa: E501
        :type: V1PodTemplateSpec
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


