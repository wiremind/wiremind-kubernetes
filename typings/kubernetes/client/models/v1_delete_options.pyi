"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1DeleteOptions:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., dry_run=..., grace_period_seconds=..., kind=..., orphan_dependents=..., preconditions=..., propagation_policy=..., local_vars_configuration=...) -> None:
        """V1DeleteOptions - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1DeleteOptions.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1DeleteOptions.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1DeleteOptions.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1DeleteOptions.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def dry_run(self): # -> None:
        """Gets the dry_run of this V1DeleteOptions.  # noqa: E501

        When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed  # noqa: E501

        :return: The dry_run of this V1DeleteOptions.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @dry_run.setter
    def dry_run(self, dry_run): # -> None:
        """Sets the dry_run of this V1DeleteOptions.

        When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed  # noqa: E501

        :param dry_run: The dry_run of this V1DeleteOptions.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def grace_period_seconds(self): # -> None:
        """Gets the grace_period_seconds of this V1DeleteOptions.  # noqa: E501

        The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.  # noqa: E501

        :return: The grace_period_seconds of this V1DeleteOptions.  # noqa: E501
        :rtype: int
        """
        ...
    
    @grace_period_seconds.setter
    def grace_period_seconds(self, grace_period_seconds): # -> None:
        """Sets the grace_period_seconds of this V1DeleteOptions.

        The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.  # noqa: E501

        :param grace_period_seconds: The grace_period_seconds of this V1DeleteOptions.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1DeleteOptions.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1DeleteOptions.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1DeleteOptions.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1DeleteOptions.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def orphan_dependents(self): # -> None:
        """Gets the orphan_dependents of this V1DeleteOptions.  # noqa: E501

        Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.  # noqa: E501

        :return: The orphan_dependents of this V1DeleteOptions.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @orphan_dependents.setter
    def orphan_dependents(self, orphan_dependents): # -> None:
        """Sets the orphan_dependents of this V1DeleteOptions.

        Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.  # noqa: E501

        :param orphan_dependents: The orphan_dependents of this V1DeleteOptions.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def preconditions(self): # -> None:
        """Gets the preconditions of this V1DeleteOptions.  # noqa: E501


        :return: The preconditions of this V1DeleteOptions.  # noqa: E501
        :rtype: V1Preconditions
        """
        ...
    
    @preconditions.setter
    def preconditions(self, preconditions): # -> None:
        """Sets the preconditions of this V1DeleteOptions.


        :param preconditions: The preconditions of this V1DeleteOptions.  # noqa: E501
        :type: V1Preconditions
        """
        ...
    
    @property
    def propagation_policy(self): # -> None:
        """Gets the propagation_policy of this V1DeleteOptions.  # noqa: E501

        Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.  # noqa: E501

        :return: The propagation_policy of this V1DeleteOptions.  # noqa: E501
        :rtype: str
        """
        ...
    
    @propagation_policy.setter
    def propagation_policy(self, propagation_policy): # -> None:
        """Sets the propagation_policy of this V1DeleteOptions.

        Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.  # noqa: E501

        :param propagation_policy: The propagation_policy of this V1DeleteOptions.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


