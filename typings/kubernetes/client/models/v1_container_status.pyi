"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ContainerStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, container_id=..., image=..., image_id=..., last_state=..., name=..., ready=..., restart_count=..., started=..., state=..., local_vars_configuration=...) -> None:
        """V1ContainerStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def container_id(self): # -> None:
        """Gets the container_id of this V1ContainerStatus.  # noqa: E501

        Container's ID in the format '<type>://<container_id>'.  # noqa: E501

        :return: The container_id of this V1ContainerStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @container_id.setter
    def container_id(self, container_id): # -> None:
        """Sets the container_id of this V1ContainerStatus.

        Container's ID in the format '<type>://<container_id>'.  # noqa: E501

        :param container_id: The container_id of this V1ContainerStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def image(self): # -> None:
        """Gets the image of this V1ContainerStatus.  # noqa: E501

        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.  # noqa: E501

        :return: The image of this V1ContainerStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @image.setter
    def image(self, image): # -> None:
        """Sets the image of this V1ContainerStatus.

        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.  # noqa: E501

        :param image: The image of this V1ContainerStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def image_id(self): # -> None:
        """Gets the image_id of this V1ContainerStatus.  # noqa: E501

        ImageID of the container's image.  # noqa: E501

        :return: The image_id of this V1ContainerStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @image_id.setter
    def image_id(self, image_id): # -> None:
        """Sets the image_id of this V1ContainerStatus.

        ImageID of the container's image.  # noqa: E501

        :param image_id: The image_id of this V1ContainerStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def last_state(self): # -> None:
        """Gets the last_state of this V1ContainerStatus.  # noqa: E501


        :return: The last_state of this V1ContainerStatus.  # noqa: E501
        :rtype: V1ContainerState
        """
        ...
    
    @last_state.setter
    def last_state(self, last_state): # -> None:
        """Sets the last_state of this V1ContainerStatus.


        :param last_state: The last_state of this V1ContainerStatus.  # noqa: E501
        :type: V1ContainerState
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ContainerStatus.  # noqa: E501

        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.  # noqa: E501

        :return: The name of this V1ContainerStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ContainerStatus.

        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.  # noqa: E501

        :param name: The name of this V1ContainerStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def ready(self): # -> None:
        """Gets the ready of this V1ContainerStatus.  # noqa: E501

        Specifies whether the container has passed its readiness probe.  # noqa: E501

        :return: The ready of this V1ContainerStatus.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @ready.setter
    def ready(self, ready): # -> None:
        """Sets the ready of this V1ContainerStatus.

        Specifies whether the container has passed its readiness probe.  # noqa: E501

        :param ready: The ready of this V1ContainerStatus.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def restart_count(self): # -> None:
        """Gets the restart_count of this V1ContainerStatus.  # noqa: E501

        The number of times the container has been restarted.  # noqa: E501

        :return: The restart_count of this V1ContainerStatus.  # noqa: E501
        :rtype: int
        """
        ...
    
    @restart_count.setter
    def restart_count(self, restart_count): # -> None:
        """Sets the restart_count of this V1ContainerStatus.

        The number of times the container has been restarted.  # noqa: E501

        :param restart_count: The restart_count of this V1ContainerStatus.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def started(self): # -> None:
        """Gets the started of this V1ContainerStatus.  # noqa: E501

        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.  # noqa: E501

        :return: The started of this V1ContainerStatus.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @started.setter
    def started(self, started): # -> None:
        """Sets the started of this V1ContainerStatus.

        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.  # noqa: E501

        :param started: The started of this V1ContainerStatus.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def state(self): # -> None:
        """Gets the state of this V1ContainerStatus.  # noqa: E501


        :return: The state of this V1ContainerStatus.  # noqa: E501
        :rtype: V1ContainerState
        """
        ...
    
    @state.setter
    def state(self, state): # -> None:
        """Sets the state of this V1ContainerStatus.


        :param state: The state of this V1ContainerStatus.  # noqa: E501
        :type: V1ContainerState
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


