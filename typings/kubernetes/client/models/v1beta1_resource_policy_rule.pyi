"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta1ResourcePolicyRule:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_groups=..., cluster_scope=..., namespaces=..., resources=..., verbs=..., local_vars_configuration=...) -> None:
        """V1beta1ResourcePolicyRule - a model defined in OpenAPI"""
        ...
    
    @property
    def api_groups(self): # -> None:
        """Gets the api_groups of this V1beta1ResourcePolicyRule.  # noqa: E501

        `apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.  # noqa: E501

        :return: The api_groups of this V1beta1ResourcePolicyRule.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @api_groups.setter
    def api_groups(self, api_groups): # -> None:
        """Sets the api_groups of this V1beta1ResourcePolicyRule.

        `apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.  # noqa: E501

        :param api_groups: The api_groups of this V1beta1ResourcePolicyRule.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def cluster_scope(self): # -> None:
        """Gets the cluster_scope of this V1beta1ResourcePolicyRule.  # noqa: E501

        `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.  # noqa: E501

        :return: The cluster_scope of this V1beta1ResourcePolicyRule.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @cluster_scope.setter
    def cluster_scope(self, cluster_scope): # -> None:
        """Sets the cluster_scope of this V1beta1ResourcePolicyRule.

        `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.  # noqa: E501

        :param cluster_scope: The cluster_scope of this V1beta1ResourcePolicyRule.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def namespaces(self): # -> None:
        """Gets the namespaces of this V1beta1ResourcePolicyRule.  # noqa: E501

        `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.  # noqa: E501

        :return: The namespaces of this V1beta1ResourcePolicyRule.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @namespaces.setter
    def namespaces(self, namespaces): # -> None:
        """Sets the namespaces of this V1beta1ResourcePolicyRule.

        `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.  # noqa: E501

        :param namespaces: The namespaces of this V1beta1ResourcePolicyRule.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def resources(self): # -> None:
        """Gets the resources of this V1beta1ResourcePolicyRule.  # noqa: E501

        `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.  # noqa: E501

        :return: The resources of this V1beta1ResourcePolicyRule.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @resources.setter
    def resources(self, resources): # -> None:
        """Sets the resources of this V1beta1ResourcePolicyRule.

        `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.  # noqa: E501

        :param resources: The resources of this V1beta1ResourcePolicyRule.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def verbs(self): # -> None:
        """Gets the verbs of this V1beta1ResourcePolicyRule.  # noqa: E501

        `verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.  # noqa: E501

        :return: The verbs of this V1beta1ResourcePolicyRule.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @verbs.setter
    def verbs(self, verbs): # -> None:
        """Sets the verbs of this V1beta1ResourcePolicyRule.

        `verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.  # noqa: E501

        :param verbs: The verbs of this V1beta1ResourcePolicyRule.  # noqa: E501
        :type: list[str]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


