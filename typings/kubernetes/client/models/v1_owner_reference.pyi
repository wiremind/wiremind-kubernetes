"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1OwnerReference:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., block_owner_deletion=..., controller=..., kind=..., name=..., uid=..., local_vars_configuration=...) -> None:
        """V1OwnerReference - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1OwnerReference.  # noqa: E501

        API version of the referent.  # noqa: E501

        :return: The api_version of this V1OwnerReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1OwnerReference.

        API version of the referent.  # noqa: E501

        :param api_version: The api_version of this V1OwnerReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def block_owner_deletion(self): # -> None:
        """Gets the block_owner_deletion of this V1OwnerReference.  # noqa: E501

        If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.  # noqa: E501

        :return: The block_owner_deletion of this V1OwnerReference.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @block_owner_deletion.setter
    def block_owner_deletion(self, block_owner_deletion): # -> None:
        """Sets the block_owner_deletion of this V1OwnerReference.

        If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.  # noqa: E501

        :param block_owner_deletion: The block_owner_deletion of this V1OwnerReference.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def controller(self): # -> None:
        """Gets the controller of this V1OwnerReference.  # noqa: E501

        If true, this reference points to the managing controller.  # noqa: E501

        :return: The controller of this V1OwnerReference.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @controller.setter
    def controller(self, controller): # -> None:
        """Sets the controller of this V1OwnerReference.

        If true, this reference points to the managing controller.  # noqa: E501

        :param controller: The controller of this V1OwnerReference.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1OwnerReference.  # noqa: E501

        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1OwnerReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1OwnerReference.

        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1OwnerReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1OwnerReference.  # noqa: E501

        Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :return: The name of this V1OwnerReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1OwnerReference.

        Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :param name: The name of this V1OwnerReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def uid(self): # -> None:
        """Gets the uid of this V1OwnerReference.  # noqa: E501

        UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :return: The uid of this V1OwnerReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @uid.setter
    def uid(self, uid): # -> None:
        """Sets the uid of this V1OwnerReference.

        UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :param uid: The uid of this V1OwnerReference.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


