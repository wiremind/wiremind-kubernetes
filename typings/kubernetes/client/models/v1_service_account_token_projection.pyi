"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ServiceAccountTokenProjection:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, audience=..., expiration_seconds=..., path=..., local_vars_configuration=...) -> None:
        """V1ServiceAccountTokenProjection - a model defined in OpenAPI"""
        ...
    
    @property
    def audience(self): # -> None:
        """Gets the audience of this V1ServiceAccountTokenProjection.  # noqa: E501

        audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.  # noqa: E501

        :return: The audience of this V1ServiceAccountTokenProjection.  # noqa: E501
        :rtype: str
        """
        ...
    
    @audience.setter
    def audience(self, audience): # -> None:
        """Sets the audience of this V1ServiceAccountTokenProjection.

        audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.  # noqa: E501

        :param audience: The audience of this V1ServiceAccountTokenProjection.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def expiration_seconds(self): # -> None:
        """Gets the expiration_seconds of this V1ServiceAccountTokenProjection.  # noqa: E501

        expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.  # noqa: E501

        :return: The expiration_seconds of this V1ServiceAccountTokenProjection.  # noqa: E501
        :rtype: int
        """
        ...
    
    @expiration_seconds.setter
    def expiration_seconds(self, expiration_seconds): # -> None:
        """Sets the expiration_seconds of this V1ServiceAccountTokenProjection.

        expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.  # noqa: E501

        :param expiration_seconds: The expiration_seconds of this V1ServiceAccountTokenProjection.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def path(self): # -> None:
        """Gets the path of this V1ServiceAccountTokenProjection.  # noqa: E501

        path is the path relative to the mount point of the file to project the token into.  # noqa: E501

        :return: The path of this V1ServiceAccountTokenProjection.  # noqa: E501
        :rtype: str
        """
        ...
    
    @path.setter
    def path(self, path): # -> None:
        """Sets the path of this V1ServiceAccountTokenProjection.

        path is the path relative to the mount point of the file to project the token into.  # noqa: E501

        :param path: The path of this V1ServiceAccountTokenProjection.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


