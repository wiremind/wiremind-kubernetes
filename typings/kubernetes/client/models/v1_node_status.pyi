"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1NodeStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, addresses=..., allocatable=..., capacity=..., conditions=..., config=..., daemon_endpoints=..., images=..., node_info=..., phase=..., volumes_attached=..., volumes_in_use=..., local_vars_configuration=...) -> None:
        """V1NodeStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def addresses(self): # -> None:
        """Gets the addresses of this V1NodeStatus.  # noqa: E501

        List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.  # noqa: E501

        :return: The addresses of this V1NodeStatus.  # noqa: E501
        :rtype: list[V1NodeAddress]
        """
        ...
    
    @addresses.setter
    def addresses(self, addresses): # -> None:
        """Sets the addresses of this V1NodeStatus.

        List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.  # noqa: E501

        :param addresses: The addresses of this V1NodeStatus.  # noqa: E501
        :type: list[V1NodeAddress]
        """
        ...
    
    @property
    def allocatable(self): # -> None:
        """Gets the allocatable of this V1NodeStatus.  # noqa: E501

        Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.  # noqa: E501

        :return: The allocatable of this V1NodeStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @allocatable.setter
    def allocatable(self, allocatable): # -> None:
        """Sets the allocatable of this V1NodeStatus.

        Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.  # noqa: E501

        :param allocatable: The allocatable of this V1NodeStatus.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def capacity(self): # -> None:
        """Gets the capacity of this V1NodeStatus.  # noqa: E501

        Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity  # noqa: E501

        :return: The capacity of this V1NodeStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @capacity.setter
    def capacity(self, capacity): # -> None:
        """Sets the capacity of this V1NodeStatus.

        Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity  # noqa: E501

        :param capacity: The capacity of this V1NodeStatus.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1NodeStatus.  # noqa: E501

        Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition  # noqa: E501

        :return: The conditions of this V1NodeStatus.  # noqa: E501
        :rtype: list[V1NodeCondition]
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1NodeStatus.

        Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition  # noqa: E501

        :param conditions: The conditions of this V1NodeStatus.  # noqa: E501
        :type: list[V1NodeCondition]
        """
        ...
    
    @property
    def config(self): # -> None:
        """Gets the config of this V1NodeStatus.  # noqa: E501


        :return: The config of this V1NodeStatus.  # noqa: E501
        :rtype: V1NodeConfigStatus
        """
        ...
    
    @config.setter
    def config(self, config): # -> None:
        """Sets the config of this V1NodeStatus.


        :param config: The config of this V1NodeStatus.  # noqa: E501
        :type: V1NodeConfigStatus
        """
        ...
    
    @property
    def daemon_endpoints(self): # -> None:
        """Gets the daemon_endpoints of this V1NodeStatus.  # noqa: E501


        :return: The daemon_endpoints of this V1NodeStatus.  # noqa: E501
        :rtype: V1NodeDaemonEndpoints
        """
        ...
    
    @daemon_endpoints.setter
    def daemon_endpoints(self, daemon_endpoints): # -> None:
        """Sets the daemon_endpoints of this V1NodeStatus.


        :param daemon_endpoints: The daemon_endpoints of this V1NodeStatus.  # noqa: E501
        :type: V1NodeDaemonEndpoints
        """
        ...
    
    @property
    def images(self): # -> None:
        """Gets the images of this V1NodeStatus.  # noqa: E501

        List of container images on this node  # noqa: E501

        :return: The images of this V1NodeStatus.  # noqa: E501
        :rtype: list[V1ContainerImage]
        """
        ...
    
    @images.setter
    def images(self, images): # -> None:
        """Sets the images of this V1NodeStatus.

        List of container images on this node  # noqa: E501

        :param images: The images of this V1NodeStatus.  # noqa: E501
        :type: list[V1ContainerImage]
        """
        ...
    
    @property
    def node_info(self): # -> None:
        """Gets the node_info of this V1NodeStatus.  # noqa: E501


        :return: The node_info of this V1NodeStatus.  # noqa: E501
        :rtype: V1NodeSystemInfo
        """
        ...
    
    @node_info.setter
    def node_info(self, node_info): # -> None:
        """Sets the node_info of this V1NodeStatus.


        :param node_info: The node_info of this V1NodeStatus.  # noqa: E501
        :type: V1NodeSystemInfo
        """
        ...
    
    @property
    def phase(self): # -> None:
        """Gets the phase of this V1NodeStatus.  # noqa: E501

        NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.    # noqa: E501

        :return: The phase of this V1NodeStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @phase.setter
    def phase(self, phase): # -> None:
        """Sets the phase of this V1NodeStatus.

        NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.    # noqa: E501

        :param phase: The phase of this V1NodeStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def volumes_attached(self): # -> None:
        """Gets the volumes_attached of this V1NodeStatus.  # noqa: E501

        List of volumes that are attached to the node.  # noqa: E501

        :return: The volumes_attached of this V1NodeStatus.  # noqa: E501
        :rtype: list[V1AttachedVolume]
        """
        ...
    
    @volumes_attached.setter
    def volumes_attached(self, volumes_attached): # -> None:
        """Sets the volumes_attached of this V1NodeStatus.

        List of volumes that are attached to the node.  # noqa: E501

        :param volumes_attached: The volumes_attached of this V1NodeStatus.  # noqa: E501
        :type: list[V1AttachedVolume]
        """
        ...
    
    @property
    def volumes_in_use(self): # -> None:
        """Gets the volumes_in_use of this V1NodeStatus.  # noqa: E501

        List of attachable volumes in use (mounted) by the node.  # noqa: E501

        :return: The volumes_in_use of this V1NodeStatus.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @volumes_in_use.setter
    def volumes_in_use(self, volumes_in_use): # -> None:
        """Sets the volumes_in_use of this V1NodeStatus.

        List of attachable volumes in use (mounted) by the node.  # noqa: E501

        :param volumes_in_use: The volumes_in_use of this V1NodeStatus.  # noqa: E501
        :type: list[str]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


