"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta1PodDisruptionBudgetStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, conditions=..., current_healthy=..., desired_healthy=..., disrupted_pods=..., disruptions_allowed=..., expected_pods=..., observed_generation=..., local_vars_configuration=...) -> None:
        """V1beta1PodDisruptionBudgetStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute               the number of allowed disruptions. Therefore no disruptions are               allowed and the status of the condition will be False. - InsufficientPods: The number of pods are either at or below the number                     required by the PodDisruptionBudget. No disruptions are                     allowed and the status of the condition will be False. - SufficientPods: There are more pods than required by the PodDisruptionBudget.                   The condition will be True, and the number of allowed                   disruptions are provided by the disruptionsAllowed property.  # noqa: E501

        :return: The conditions of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: list[V1Condition]
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1beta1PodDisruptionBudgetStatus.

        Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute               the number of allowed disruptions. Therefore no disruptions are               allowed and the status of the condition will be False. - InsufficientPods: The number of pods are either at or below the number                     required by the PodDisruptionBudget. No disruptions are                     allowed and the status of the condition will be False. - SufficientPods: There are more pods than required by the PodDisruptionBudget.                   The condition will be True, and the number of allowed                   disruptions are provided by the disruptionsAllowed property.  # noqa: E501

        :param conditions: The conditions of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: list[V1Condition]
        """
        ...
    
    @property
    def current_healthy(self): # -> None:
        """Gets the current_healthy of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        current number of healthy pods  # noqa: E501

        :return: The current_healthy of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: int
        """
        ...
    
    @current_healthy.setter
    def current_healthy(self, current_healthy): # -> None:
        """Sets the current_healthy of this V1beta1PodDisruptionBudgetStatus.

        current number of healthy pods  # noqa: E501

        :param current_healthy: The current_healthy of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def desired_healthy(self): # -> None:
        """Gets the desired_healthy of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        minimum desired number of healthy pods  # noqa: E501

        :return: The desired_healthy of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: int
        """
        ...
    
    @desired_healthy.setter
    def desired_healthy(self, desired_healthy): # -> None:
        """Sets the desired_healthy of this V1beta1PodDisruptionBudgetStatus.

        minimum desired number of healthy pods  # noqa: E501

        :param desired_healthy: The desired_healthy of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def disrupted_pods(self): # -> None:
        """Gets the disrupted_pods of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.  # noqa: E501

        :return: The disrupted_pods of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: dict(str, datetime)
        """
        ...
    
    @disrupted_pods.setter
    def disrupted_pods(self, disrupted_pods): # -> None:
        """Sets the disrupted_pods of this V1beta1PodDisruptionBudgetStatus.

        DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.  # noqa: E501

        :param disrupted_pods: The disrupted_pods of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: dict(str, datetime)
        """
        ...
    
    @property
    def disruptions_allowed(self): # -> None:
        """Gets the disruptions_allowed of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        Number of pod disruptions that are currently allowed.  # noqa: E501

        :return: The disruptions_allowed of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: int
        """
        ...
    
    @disruptions_allowed.setter
    def disruptions_allowed(self, disruptions_allowed): # -> None:
        """Sets the disruptions_allowed of this V1beta1PodDisruptionBudgetStatus.

        Number of pod disruptions that are currently allowed.  # noqa: E501

        :param disruptions_allowed: The disruptions_allowed of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def expected_pods(self): # -> None:
        """Gets the expected_pods of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        total number of pods counted by this disruption budget  # noqa: E501

        :return: The expected_pods of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: int
        """
        ...
    
    @expected_pods.setter
    def expected_pods(self, expected_pods): # -> None:
        """Sets the expected_pods of this V1beta1PodDisruptionBudgetStatus.

        total number of pods counted by this disruption budget  # noqa: E501

        :param expected_pods: The expected_pods of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def observed_generation(self): # -> None:
        """Gets the observed_generation of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501

        Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.  # noqa: E501

        :return: The observed_generation of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: int
        """
        ...
    
    @observed_generation.setter
    def observed_generation(self, observed_generation): # -> None:
        """Sets the observed_generation of this V1beta1PodDisruptionBudgetStatus.

        Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.  # noqa: E501

        :param observed_generation: The observed_generation of this V1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


