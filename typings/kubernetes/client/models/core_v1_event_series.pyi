"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class CoreV1EventSeries:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, count=..., last_observed_time=..., local_vars_configuration=...) -> None:
        """CoreV1EventSeries - a model defined in OpenAPI"""
        ...
    
    @property
    def count(self): # -> None:
        """Gets the count of this CoreV1EventSeries.  # noqa: E501

        Number of occurrences in this series up to the last heartbeat time  # noqa: E501

        :return: The count of this CoreV1EventSeries.  # noqa: E501
        :rtype: int
        """
        ...
    
    @count.setter
    def count(self, count): # -> None:
        """Sets the count of this CoreV1EventSeries.

        Number of occurrences in this series up to the last heartbeat time  # noqa: E501

        :param count: The count of this CoreV1EventSeries.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def last_observed_time(self): # -> None:
        """Gets the last_observed_time of this CoreV1EventSeries.  # noqa: E501

        Time of the last occurrence observed  # noqa: E501

        :return: The last_observed_time of this CoreV1EventSeries.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @last_observed_time.setter
    def last_observed_time(self, last_observed_time): # -> None:
        """Sets the last_observed_time of this CoreV1EventSeries.

        Time of the last occurrence observed  # noqa: E501

        :param last_observed_time: The last_observed_time of this CoreV1EventSeries.  # noqa: E501
        :type: datetime
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


