"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1CSINodeDriver:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, allocatable=..., name=..., node_id=..., topology_keys=..., local_vars_configuration=...) -> None:
        """V1CSINodeDriver - a model defined in OpenAPI"""
        ...
    
    @property
    def allocatable(self): # -> None:
        """Gets the allocatable of this V1CSINodeDriver.  # noqa: E501


        :return: The allocatable of this V1CSINodeDriver.  # noqa: E501
        :rtype: V1VolumeNodeResources
        """
        ...
    
    @allocatable.setter
    def allocatable(self, allocatable): # -> None:
        """Sets the allocatable of this V1CSINodeDriver.


        :param allocatable: The allocatable of this V1CSINodeDriver.  # noqa: E501
        :type: V1VolumeNodeResources
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1CSINodeDriver.  # noqa: E501

        This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.  # noqa: E501

        :return: The name of this V1CSINodeDriver.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1CSINodeDriver.

        This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.  # noqa: E501

        :param name: The name of this V1CSINodeDriver.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def node_id(self): # -> None:
        """Gets the node_id of this V1CSINodeDriver.  # noqa: E501

        nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.  # noqa: E501

        :return: The node_id of this V1CSINodeDriver.  # noqa: E501
        :rtype: str
        """
        ...
    
    @node_id.setter
    def node_id(self, node_id): # -> None:
        """Sets the node_id of this V1CSINodeDriver.

        nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.  # noqa: E501

        :param node_id: The node_id of this V1CSINodeDriver.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def topology_keys(self): # -> None:
        """Gets the topology_keys of this V1CSINodeDriver.  # noqa: E501

        topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.  # noqa: E501

        :return: The topology_keys of this V1CSINodeDriver.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @topology_keys.setter
    def topology_keys(self, topology_keys): # -> None:
        """Sets the topology_keys of this V1CSINodeDriver.

        topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.  # noqa: E501

        :param topology_keys: The topology_keys of this V1CSINodeDriver.  # noqa: E501
        :type: list[str]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


