"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1StatefulSetSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, min_ready_seconds=..., persistent_volume_claim_retention_policy=..., pod_management_policy=..., replicas=..., revision_history_limit=..., selector=..., service_name=..., template=..., update_strategy=..., volume_claim_templates=..., local_vars_configuration=...) -> None:
        """V1StatefulSetSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def min_ready_seconds(self): # -> None:
        """Gets the min_ready_seconds of this V1StatefulSetSpec.  # noqa: E501

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.  # noqa: E501

        :return: The min_ready_seconds of this V1StatefulSetSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds): # -> None:
        """Sets the min_ready_seconds of this V1StatefulSetSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.  # noqa: E501

        :param min_ready_seconds: The min_ready_seconds of this V1StatefulSetSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def persistent_volume_claim_retention_policy(self): # -> None:
        """Gets the persistent_volume_claim_retention_policy of this V1StatefulSetSpec.  # noqa: E501


        :return: The persistent_volume_claim_retention_policy of this V1StatefulSetSpec.  # noqa: E501
        :rtype: V1StatefulSetPersistentVolumeClaimRetentionPolicy
        """
        ...
    
    @persistent_volume_claim_retention_policy.setter
    def persistent_volume_claim_retention_policy(self, persistent_volume_claim_retention_policy): # -> None:
        """Sets the persistent_volume_claim_retention_policy of this V1StatefulSetSpec.


        :param persistent_volume_claim_retention_policy: The persistent_volume_claim_retention_policy of this V1StatefulSetSpec.  # noqa: E501
        :type: V1StatefulSetPersistentVolumeClaimRetentionPolicy
        """
        ...
    
    @property
    def pod_management_policy(self): # -> None:
        """Gets the pod_management_policy of this V1StatefulSetSpec.  # noqa: E501

        podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.    # noqa: E501

        :return: The pod_management_policy of this V1StatefulSetSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @pod_management_policy.setter
    def pod_management_policy(self, pod_management_policy): # -> None:
        """Sets the pod_management_policy of this V1StatefulSetSpec.

        podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.    # noqa: E501

        :param pod_management_policy: The pod_management_policy of this V1StatefulSetSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def replicas(self): # -> None:
        """Gets the replicas of this V1StatefulSetSpec.  # noqa: E501

        replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.  # noqa: E501

        :return: The replicas of this V1StatefulSetSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @replicas.setter
    def replicas(self, replicas): # -> None:
        """Sets the replicas of this V1StatefulSetSpec.

        replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.  # noqa: E501

        :param replicas: The replicas of this V1StatefulSetSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def revision_history_limit(self): # -> None:
        """Gets the revision_history_limit of this V1StatefulSetSpec.  # noqa: E501

        revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.  # noqa: E501

        :return: The revision_history_limit of this V1StatefulSetSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @revision_history_limit.setter
    def revision_history_limit(self, revision_history_limit): # -> None:
        """Sets the revision_history_limit of this V1StatefulSetSpec.

        revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.  # noqa: E501

        :param revision_history_limit: The revision_history_limit of this V1StatefulSetSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def selector(self): # -> None:
        """Gets the selector of this V1StatefulSetSpec.  # noqa: E501


        :return: The selector of this V1StatefulSetSpec.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @selector.setter
    def selector(self, selector): # -> None:
        """Sets the selector of this V1StatefulSetSpec.


        :param selector: The selector of this V1StatefulSetSpec.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def service_name(self): # -> None:
        """Gets the service_name of this V1StatefulSetSpec.  # noqa: E501

        serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.  # noqa: E501

        :return: The service_name of this V1StatefulSetSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @service_name.setter
    def service_name(self, service_name): # -> None:
        """Sets the service_name of this V1StatefulSetSpec.

        serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.  # noqa: E501

        :param service_name: The service_name of this V1StatefulSetSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def template(self): # -> None:
        """Gets the template of this V1StatefulSetSpec.  # noqa: E501


        :return: The template of this V1StatefulSetSpec.  # noqa: E501
        :rtype: V1PodTemplateSpec
        """
        ...
    
    @template.setter
    def template(self, template): # -> None:
        """Sets the template of this V1StatefulSetSpec.


        :param template: The template of this V1StatefulSetSpec.  # noqa: E501
        :type: V1PodTemplateSpec
        """
        ...
    
    @property
    def update_strategy(self): # -> None:
        """Gets the update_strategy of this V1StatefulSetSpec.  # noqa: E501


        :return: The update_strategy of this V1StatefulSetSpec.  # noqa: E501
        :rtype: V1StatefulSetUpdateStrategy
        """
        ...
    
    @update_strategy.setter
    def update_strategy(self, update_strategy): # -> None:
        """Sets the update_strategy of this V1StatefulSetSpec.


        :param update_strategy: The update_strategy of this V1StatefulSetSpec.  # noqa: E501
        :type: V1StatefulSetUpdateStrategy
        """
        ...
    
    @property
    def volume_claim_templates(self): # -> None:
        """Gets the volume_claim_templates of this V1StatefulSetSpec.  # noqa: E501

        volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.  # noqa: E501

        :return: The volume_claim_templates of this V1StatefulSetSpec.  # noqa: E501
        :rtype: list[V1PersistentVolumeClaim]
        """
        ...
    
    @volume_claim_templates.setter
    def volume_claim_templates(self, volume_claim_templates): # -> None:
        """Sets the volume_claim_templates of this V1StatefulSetSpec.

        volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.  # noqa: E501

        :param volume_claim_templates: The volume_claim_templates of this V1StatefulSetSpec.  # noqa: E501
        :type: list[V1PersistentVolumeClaim]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


