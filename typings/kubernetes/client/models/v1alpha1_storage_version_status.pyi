"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1alpha1StorageVersionStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, common_encoding_version=..., conditions=..., storage_versions=..., local_vars_configuration=...) -> None:
        """V1alpha1StorageVersionStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def common_encoding_version(self): # -> None:
        """Gets the common_encoding_version of this V1alpha1StorageVersionStatus.  # noqa: E501

        If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.  # noqa: E501

        :return: The common_encoding_version of this V1alpha1StorageVersionStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @common_encoding_version.setter
    def common_encoding_version(self, common_encoding_version): # -> None:
        """Sets the common_encoding_version of this V1alpha1StorageVersionStatus.

        If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.  # noqa: E501

        :param common_encoding_version: The common_encoding_version of this V1alpha1StorageVersionStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1alpha1StorageVersionStatus.  # noqa: E501

        The latest available observations of the storageVersion's state.  # noqa: E501

        :return: The conditions of this V1alpha1StorageVersionStatus.  # noqa: E501
        :rtype: list[V1alpha1StorageVersionCondition]
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1alpha1StorageVersionStatus.

        The latest available observations of the storageVersion's state.  # noqa: E501

        :param conditions: The conditions of this V1alpha1StorageVersionStatus.  # noqa: E501
        :type: list[V1alpha1StorageVersionCondition]
        """
        ...
    
    @property
    def storage_versions(self): # -> None:
        """Gets the storage_versions of this V1alpha1StorageVersionStatus.  # noqa: E501

        The reported versions per API server instance.  # noqa: E501

        :return: The storage_versions of this V1alpha1StorageVersionStatus.  # noqa: E501
        :rtype: list[V1alpha1ServerStorageVersion]
        """
        ...
    
    @storage_versions.setter
    def storage_versions(self, storage_versions): # -> None:
        """Sets the storage_versions of this V1alpha1StorageVersionStatus.

        The reported versions per API server instance.  # noqa: E501

        :param storage_versions: The storage_versions of this V1alpha1StorageVersionStatus.  # noqa: E501
        :type: list[V1alpha1ServerStorageVersion]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


