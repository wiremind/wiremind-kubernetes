"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1UserInfo:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, extra=..., groups=..., uid=..., username=..., local_vars_configuration=...) -> None:
        """V1UserInfo - a model defined in OpenAPI"""
        ...
    
    @property
    def extra(self): # -> None:
        """Gets the extra of this V1UserInfo.  # noqa: E501

        Any additional information provided by the authenticator.  # noqa: E501

        :return: The extra of this V1UserInfo.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        ...
    
    @extra.setter
    def extra(self, extra): # -> None:
        """Sets the extra of this V1UserInfo.

        Any additional information provided by the authenticator.  # noqa: E501

        :param extra: The extra of this V1UserInfo.  # noqa: E501
        :type: dict(str, list[str])
        """
        ...
    
    @property
    def groups(self): # -> None:
        """Gets the groups of this V1UserInfo.  # noqa: E501

        The names of groups this user is a part of.  # noqa: E501

        :return: The groups of this V1UserInfo.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @groups.setter
    def groups(self, groups): # -> None:
        """Sets the groups of this V1UserInfo.

        The names of groups this user is a part of.  # noqa: E501

        :param groups: The groups of this V1UserInfo.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def uid(self): # -> None:
        """Gets the uid of this V1UserInfo.  # noqa: E501

        A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.  # noqa: E501

        :return: The uid of this V1UserInfo.  # noqa: E501
        :rtype: str
        """
        ...
    
    @uid.setter
    def uid(self, uid): # -> None:
        """Sets the uid of this V1UserInfo.

        A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.  # noqa: E501

        :param uid: The uid of this V1UserInfo.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def username(self): # -> None:
        """Gets the username of this V1UserInfo.  # noqa: E501

        The name that uniquely identifies this user among all active users.  # noqa: E501

        :return: The username of this V1UserInfo.  # noqa: E501
        :rtype: str
        """
        ...
    
    @username.setter
    def username(self, username): # -> None:
        """Sets the username of this V1UserInfo.

        The name that uniquely identifies this user among all active users.  # noqa: E501

        :param username: The username of this V1UserInfo.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


