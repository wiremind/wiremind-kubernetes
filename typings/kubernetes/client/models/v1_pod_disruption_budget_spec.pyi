"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1PodDisruptionBudgetSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, max_unavailable=..., min_available=..., selector=..., local_vars_configuration=...) -> None:
        """V1PodDisruptionBudgetSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def max_unavailable(self): # -> None:
        """Gets the max_unavailable of this V1PodDisruptionBudgetSpec.  # noqa: E501

        An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".  # noqa: E501

        :return: The max_unavailable of this V1PodDisruptionBudgetSpec.  # noqa: E501
        :rtype: object
        """
        ...
    
    @max_unavailable.setter
    def max_unavailable(self, max_unavailable): # -> None:
        """Sets the max_unavailable of this V1PodDisruptionBudgetSpec.

        An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".  # noqa: E501

        :param max_unavailable: The max_unavailable of this V1PodDisruptionBudgetSpec.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def min_available(self): # -> None:
        """Gets the min_available of this V1PodDisruptionBudgetSpec.  # noqa: E501

        An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".  # noqa: E501

        :return: The min_available of this V1PodDisruptionBudgetSpec.  # noqa: E501
        :rtype: object
        """
        ...
    
    @min_available.setter
    def min_available(self, min_available): # -> None:
        """Sets the min_available of this V1PodDisruptionBudgetSpec.

        An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".  # noqa: E501

        :param min_available: The min_available of this V1PodDisruptionBudgetSpec.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def selector(self): # -> None:
        """Gets the selector of this V1PodDisruptionBudgetSpec.  # noqa: E501


        :return: The selector of this V1PodDisruptionBudgetSpec.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @selector.setter
    def selector(self, selector): # -> None:
        """Sets the selector of this V1PodDisruptionBudgetSpec.


        :param selector: The selector of this V1PodDisruptionBudgetSpec.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


