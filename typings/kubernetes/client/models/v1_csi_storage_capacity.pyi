"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1CSIStorageCapacity:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., capacity=..., kind=..., maximum_volume_size=..., metadata=..., node_topology=..., storage_class_name=..., local_vars_configuration=...) -> None:
        """V1CSIStorageCapacity - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1CSIStorageCapacity.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1CSIStorageCapacity.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1CSIStorageCapacity.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def capacity(self): # -> None:
        """Gets the capacity of this V1CSIStorageCapacity.  # noqa: E501

        Capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.  # noqa: E501

        :return: The capacity of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        ...
    
    @capacity.setter
    def capacity(self, capacity): # -> None:
        """Sets the capacity of this V1CSIStorageCapacity.

        Capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.  # noqa: E501

        :param capacity: The capacity of this V1CSIStorageCapacity.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1CSIStorageCapacity.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1CSIStorageCapacity.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1CSIStorageCapacity.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def maximum_volume_size(self): # -> None:
        """Gets the maximum_volume_size of this V1CSIStorageCapacity.  # noqa: E501

        MaximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.  # noqa: E501

        :return: The maximum_volume_size of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        ...
    
    @maximum_volume_size.setter
    def maximum_volume_size(self, maximum_volume_size): # -> None:
        """Sets the maximum_volume_size of this V1CSIStorageCapacity.

        MaximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.  # noqa: E501

        :param maximum_volume_size: The maximum_volume_size of this V1CSIStorageCapacity.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def metadata(self): # -> None:
        """Gets the metadata of this V1CSIStorageCapacity.  # noqa: E501


        :return: The metadata of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        ...
    
    @metadata.setter
    def metadata(self, metadata): # -> None:
        """Sets the metadata of this V1CSIStorageCapacity.


        :param metadata: The metadata of this V1CSIStorageCapacity.  # noqa: E501
        :type: V1ObjectMeta
        """
        ...
    
    @property
    def node_topology(self): # -> None:
        """Gets the node_topology of this V1CSIStorageCapacity.  # noqa: E501


        :return: The node_topology of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @node_topology.setter
    def node_topology(self, node_topology): # -> None:
        """Sets the node_topology of this V1CSIStorageCapacity.


        :param node_topology: The node_topology of this V1CSIStorageCapacity.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def storage_class_name(self): # -> None:
        """Gets the storage_class_name of this V1CSIStorageCapacity.  # noqa: E501

        The name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.  # noqa: E501

        :return: The storage_class_name of this V1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        ...
    
    @storage_class_name.setter
    def storage_class_name(self, storage_class_name): # -> None:
        """Sets the storage_class_name of this V1CSIStorageCapacity.

        The name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.  # noqa: E501

        :param storage_class_name: The storage_class_name of this V1CSIStorageCapacity.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


