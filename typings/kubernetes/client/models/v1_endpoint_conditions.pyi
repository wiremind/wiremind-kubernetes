"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1EndpointConditions:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, ready=..., serving=..., terminating=..., local_vars_configuration=...) -> None:
        """V1EndpointConditions - a model defined in OpenAPI"""
        ...
    
    @property
    def ready(self): # -> None:
        """Gets the ready of this V1EndpointConditions.  # noqa: E501

        ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be \"true\" for terminating endpoints.  # noqa: E501

        :return: The ready of this V1EndpointConditions.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @ready.setter
    def ready(self, ready): # -> None:
        """Sets the ready of this V1EndpointConditions.

        ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be \"true\" for terminating endpoints.  # noqa: E501

        :param ready: The ready of this V1EndpointConditions.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def serving(self): # -> None:
        """Gets the serving of this V1EndpointConditions.  # noqa: E501

        serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.  # noqa: E501

        :return: The serving of this V1EndpointConditions.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @serving.setter
    def serving(self, serving): # -> None:
        """Sets the serving of this V1EndpointConditions.

        serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.  # noqa: E501

        :param serving: The serving of this V1EndpointConditions.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def terminating(self): # -> None:
        """Gets the terminating of this V1EndpointConditions.  # noqa: E501

        terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.  # noqa: E501

        :return: The terminating of this V1EndpointConditions.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @terminating.setter
    def terminating(self, terminating): # -> None:
        """Sets the terminating of this V1EndpointConditions.

        terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.  # noqa: E501

        :param terminating: The terminating of this V1EndpointConditions.  # noqa: E501
        :type: bool
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


