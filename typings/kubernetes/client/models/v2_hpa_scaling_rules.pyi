"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V2HPAScalingRules:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, policies=..., select_policy=..., stabilization_window_seconds=..., local_vars_configuration=...) -> None:
        """V2HPAScalingRules - a model defined in OpenAPI"""
        ...
    
    @property
    def policies(self): # -> None:
        """Gets the policies of this V2HPAScalingRules.  # noqa: E501

        policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid  # noqa: E501

        :return: The policies of this V2HPAScalingRules.  # noqa: E501
        :rtype: list[V2HPAScalingPolicy]
        """
        ...
    
    @policies.setter
    def policies(self, policies): # -> None:
        """Sets the policies of this V2HPAScalingRules.

        policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid  # noqa: E501

        :param policies: The policies of this V2HPAScalingRules.  # noqa: E501
        :type: list[V2HPAScalingPolicy]
        """
        ...
    
    @property
    def select_policy(self): # -> None:
        """Gets the select_policy of this V2HPAScalingRules.  # noqa: E501

        selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.  # noqa: E501

        :return: The select_policy of this V2HPAScalingRules.  # noqa: E501
        :rtype: str
        """
        ...
    
    @select_policy.setter
    def select_policy(self, select_policy): # -> None:
        """Sets the select_policy of this V2HPAScalingRules.

        selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.  # noqa: E501

        :param select_policy: The select_policy of this V2HPAScalingRules.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def stabilization_window_seconds(self): # -> None:
        """Gets the stabilization_window_seconds of this V2HPAScalingRules.  # noqa: E501

        StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).  # noqa: E501

        :return: The stabilization_window_seconds of this V2HPAScalingRules.  # noqa: E501
        :rtype: int
        """
        ...
    
    @stabilization_window_seconds.setter
    def stabilization_window_seconds(self, stabilization_window_seconds): # -> None:
        """Sets the stabilization_window_seconds of this V2HPAScalingRules.

        StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).  # noqa: E501

        :param stabilization_window_seconds: The stabilization_window_seconds of this V2HPAScalingRules.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


