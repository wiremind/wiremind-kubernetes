"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ValidatingWebhook:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, admission_review_versions=..., client_config=..., failure_policy=..., match_policy=..., name=..., namespace_selector=..., object_selector=..., rules=..., side_effects=..., timeout_seconds=..., local_vars_configuration=...) -> None:
        """V1ValidatingWebhook - a model defined in OpenAPI"""
        ...
    
    @property
    def admission_review_versions(self): # -> None:
        """Gets the admission_review_versions of this V1ValidatingWebhook.  # noqa: E501

        AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.  # noqa: E501

        :return: The admission_review_versions of this V1ValidatingWebhook.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @admission_review_versions.setter
    def admission_review_versions(self, admission_review_versions): # -> None:
        """Sets the admission_review_versions of this V1ValidatingWebhook.

        AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.  # noqa: E501

        :param admission_review_versions: The admission_review_versions of this V1ValidatingWebhook.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def client_config(self): # -> None:
        """Gets the client_config of this V1ValidatingWebhook.  # noqa: E501


        :return: The client_config of this V1ValidatingWebhook.  # noqa: E501
        :rtype: AdmissionregistrationV1WebhookClientConfig
        """
        ...
    
    @client_config.setter
    def client_config(self, client_config): # -> None:
        """Sets the client_config of this V1ValidatingWebhook.


        :param client_config: The client_config of this V1ValidatingWebhook.  # noqa: E501
        :type: AdmissionregistrationV1WebhookClientConfig
        """
        ...
    
    @property
    def failure_policy(self): # -> None:
        """Gets the failure_policy of this V1ValidatingWebhook.  # noqa: E501

        FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.  # noqa: E501

        :return: The failure_policy of this V1ValidatingWebhook.  # noqa: E501
        :rtype: str
        """
        ...
    
    @failure_policy.setter
    def failure_policy(self, failure_policy): # -> None:
        """Sets the failure_policy of this V1ValidatingWebhook.

        FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.  # noqa: E501

        :param failure_policy: The failure_policy of this V1ValidatingWebhook.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def match_policy(self): # -> None:
        """Gets the match_policy of this V1ValidatingWebhook.  # noqa: E501

        matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.  Defaults to \"Equivalent\"  # noqa: E501

        :return: The match_policy of this V1ValidatingWebhook.  # noqa: E501
        :rtype: str
        """
        ...
    
    @match_policy.setter
    def match_policy(self, match_policy): # -> None:
        """Sets the match_policy of this V1ValidatingWebhook.

        matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.  Defaults to \"Equivalent\"  # noqa: E501

        :param match_policy: The match_policy of this V1ValidatingWebhook.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ValidatingWebhook.  # noqa: E501

        The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.  # noqa: E501

        :return: The name of this V1ValidatingWebhook.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ValidatingWebhook.

        The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.  # noqa: E501

        :param name: The name of this V1ValidatingWebhook.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def namespace_selector(self): # -> None:
        """Gets the namespace_selector of this V1ValidatingWebhook.  # noqa: E501


        :return: The namespace_selector of this V1ValidatingWebhook.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @namespace_selector.setter
    def namespace_selector(self, namespace_selector): # -> None:
        """Sets the namespace_selector of this V1ValidatingWebhook.


        :param namespace_selector: The namespace_selector of this V1ValidatingWebhook.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def object_selector(self): # -> None:
        """Gets the object_selector of this V1ValidatingWebhook.  # noqa: E501


        :return: The object_selector of this V1ValidatingWebhook.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @object_selector.setter
    def object_selector(self, object_selector): # -> None:
        """Sets the object_selector of this V1ValidatingWebhook.


        :param object_selector: The object_selector of this V1ValidatingWebhook.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def rules(self): # -> None:
        """Gets the rules of this V1ValidatingWebhook.  # noqa: E501

        Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.  # noqa: E501

        :return: The rules of this V1ValidatingWebhook.  # noqa: E501
        :rtype: list[V1RuleWithOperations]
        """
        ...
    
    @rules.setter
    def rules(self, rules): # -> None:
        """Sets the rules of this V1ValidatingWebhook.

        Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.  # noqa: E501

        :param rules: The rules of this V1ValidatingWebhook.  # noqa: E501
        :type: list[V1RuleWithOperations]
        """
        ...
    
    @property
    def side_effects(self): # -> None:
        """Gets the side_effects of this V1ValidatingWebhook.  # noqa: E501

        SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.  # noqa: E501

        :return: The side_effects of this V1ValidatingWebhook.  # noqa: E501
        :rtype: str
        """
        ...
    
    @side_effects.setter
    def side_effects(self, side_effects): # -> None:
        """Sets the side_effects of this V1ValidatingWebhook.

        SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.  # noqa: E501

        :param side_effects: The side_effects of this V1ValidatingWebhook.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def timeout_seconds(self): # -> None:
        """Gets the timeout_seconds of this V1ValidatingWebhook.  # noqa: E501

        TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.  # noqa: E501

        :return: The timeout_seconds of this V1ValidatingWebhook.  # noqa: E501
        :rtype: int
        """
        ...
    
    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds): # -> None:
        """Sets the timeout_seconds of this V1ValidatingWebhook.

        TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this V1ValidatingWebhook.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


