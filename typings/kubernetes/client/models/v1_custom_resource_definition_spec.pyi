"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1CustomResourceDefinitionSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, conversion=..., group=..., names=..., preserve_unknown_fields=..., scope=..., versions=..., local_vars_configuration=...) -> None:
        """V1CustomResourceDefinitionSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def conversion(self): # -> None:
        """Gets the conversion of this V1CustomResourceDefinitionSpec.  # noqa: E501


        :return: The conversion of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: V1CustomResourceConversion
        """
        ...
    
    @conversion.setter
    def conversion(self, conversion): # -> None:
        """Sets the conversion of this V1CustomResourceDefinitionSpec.


        :param conversion: The conversion of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :type: V1CustomResourceConversion
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this V1CustomResourceDefinitionSpec.  # noqa: E501

        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).  # noqa: E501

        :return: The group of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this V1CustomResourceDefinitionSpec.

        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).  # noqa: E501

        :param group: The group of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def names(self): # -> None:
        """Gets the names of this V1CustomResourceDefinitionSpec.  # noqa: E501


        :return: The names of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: V1CustomResourceDefinitionNames
        """
        ...
    
    @names.setter
    def names(self, names): # -> None:
        """Sets the names of this V1CustomResourceDefinitionSpec.


        :param names: The names of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :type: V1CustomResourceDefinitionNames
        """
        ...
    
    @property
    def preserve_unknown_fields(self): # -> None:
        """Gets the preserve_unknown_fields of this V1CustomResourceDefinitionSpec.  # noqa: E501

        preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.  # noqa: E501

        :return: The preserve_unknown_fields of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @preserve_unknown_fields.setter
    def preserve_unknown_fields(self, preserve_unknown_fields): # -> None:
        """Sets the preserve_unknown_fields of this V1CustomResourceDefinitionSpec.

        preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.  # noqa: E501

        :param preserve_unknown_fields: The preserve_unknown_fields of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def scope(self): # -> None:
        """Gets the scope of this V1CustomResourceDefinitionSpec.  # noqa: E501

        scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.  # noqa: E501

        :return: The scope of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @scope.setter
    def scope(self, scope): # -> None:
        """Sets the scope of this V1CustomResourceDefinitionSpec.

        scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.  # noqa: E501

        :param scope: The scope of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def versions(self): # -> None:
        """Gets the versions of this V1CustomResourceDefinitionSpec.  # noqa: E501

        versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :return: The versions of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: list[V1CustomResourceDefinitionVersion]
        """
        ...
    
    @versions.setter
    def versions(self, versions): # -> None:
        """Sets the versions of this V1CustomResourceDefinitionSpec.

        versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :param versions: The versions of this V1CustomResourceDefinitionSpec.  # noqa: E501
        :type: list[V1CustomResourceDefinitionVersion]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


