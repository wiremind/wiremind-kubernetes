"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1HTTPIngressPath:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, backend=..., path=..., path_type=..., local_vars_configuration=...) -> None:
        """V1HTTPIngressPath - a model defined in OpenAPI"""
        ...
    
    @property
    def backend(self): # -> None:
        """Gets the backend of this V1HTTPIngressPath.  # noqa: E501


        :return: The backend of this V1HTTPIngressPath.  # noqa: E501
        :rtype: V1IngressBackend
        """
        ...
    
    @backend.setter
    def backend(self, backend): # -> None:
        """Sets the backend of this V1HTTPIngressPath.


        :param backend: The backend of this V1HTTPIngressPath.  # noqa: E501
        :type: V1IngressBackend
        """
        ...
    
    @property
    def path(self): # -> None:
        """Gets the path of this V1HTTPIngressPath.  # noqa: E501

        Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".  # noqa: E501

        :return: The path of this V1HTTPIngressPath.  # noqa: E501
        :rtype: str
        """
        ...
    
    @path.setter
    def path(self, path): # -> None:
        """Sets the path of this V1HTTPIngressPath.

        Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".  # noqa: E501

        :param path: The path of this V1HTTPIngressPath.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def path_type(self): # -> None:
        """Gets the path_type of this V1HTTPIngressPath.  # noqa: E501

        PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.  # noqa: E501

        :return: The path_type of this V1HTTPIngressPath.  # noqa: E501
        :rtype: str
        """
        ...
    
    @path_type.setter
    def path_type(self, path_type): # -> None:
        """Sets the path_type of this V1HTTPIngressPath.

        PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.  # noqa: E501

        :param path_type: The path_type of this V1HTTPIngressPath.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


