"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1CephFSPersistentVolumeSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, monitors=..., path=..., read_only=..., secret_file=..., secret_ref=..., user=..., local_vars_configuration=...) -> None:
        """V1CephFSPersistentVolumeSource - a model defined in OpenAPI"""
        ...
    
    @property
    def monitors(self): # -> None:
        """Gets the monitors of this V1CephFSPersistentVolumeSource.  # noqa: E501

        monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :return: The monitors of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @monitors.setter
    def monitors(self, monitors): # -> None:
        """Sets the monitors of this V1CephFSPersistentVolumeSource.

        monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :param monitors: The monitors of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def path(self): # -> None:
        """Gets the path of this V1CephFSPersistentVolumeSource.  # noqa: E501

        path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /  # noqa: E501

        :return: The path of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @path.setter
    def path(self, path): # -> None:
        """Sets the path of this V1CephFSPersistentVolumeSource.

        path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /  # noqa: E501

        :param path: The path of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def read_only(self): # -> None:
        """Gets the read_only of this V1CephFSPersistentVolumeSource.  # noqa: E501

        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :return: The read_only of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @read_only.setter
    def read_only(self, read_only): # -> None:
        """Sets the read_only of this V1CephFSPersistentVolumeSource.

        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :param read_only: The read_only of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def secret_file(self): # -> None:
        """Gets the secret_file of this V1CephFSPersistentVolumeSource.  # noqa: E501

        secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :return: The secret_file of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @secret_file.setter
    def secret_file(self, secret_file): # -> None:
        """Sets the secret_file of this V1CephFSPersistentVolumeSource.

        secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :param secret_file: The secret_file of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def secret_ref(self): # -> None:
        """Gets the secret_ref of this V1CephFSPersistentVolumeSource.  # noqa: E501


        :return: The secret_ref of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :rtype: V1SecretReference
        """
        ...
    
    @secret_ref.setter
    def secret_ref(self, secret_ref): # -> None:
        """Sets the secret_ref of this V1CephFSPersistentVolumeSource.


        :param secret_ref: The secret_ref of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :type: V1SecretReference
        """
        ...
    
    @property
    def user(self): # -> None:
        """Gets the user of this V1CephFSPersistentVolumeSource.  # noqa: E501

        user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :return: The user of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @user.setter
    def user(self, user): # -> None:
        """Sets the user of this V1CephFSPersistentVolumeSource.

        user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it  # noqa: E501

        :param user: The user of this V1CephFSPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


