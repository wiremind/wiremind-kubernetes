"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V2beta2HorizontalPodAutoscalerSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, behavior=..., max_replicas=..., metrics=..., min_replicas=..., scale_target_ref=..., local_vars_configuration=...) -> None:
        """V2beta2HorizontalPodAutoscalerSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def behavior(self): # -> None:
        """Gets the behavior of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501


        :return: The behavior of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :rtype: V2beta2HorizontalPodAutoscalerBehavior
        """
        ...
    
    @behavior.setter
    def behavior(self, behavior): # -> None:
        """Sets the behavior of this V2beta2HorizontalPodAutoscalerSpec.


        :param behavior: The behavior of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :type: V2beta2HorizontalPodAutoscalerBehavior
        """
        ...
    
    @property
    def max_replicas(self): # -> None:
        """Gets the max_replicas of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501

        maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.  # noqa: E501

        :return: The max_replicas of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @max_replicas.setter
    def max_replicas(self, max_replicas): # -> None:
        """Sets the max_replicas of this V2beta2HorizontalPodAutoscalerSpec.

        maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.  # noqa: E501

        :param max_replicas: The max_replicas of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def metrics(self): # -> None:
        """Gets the metrics of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501

        metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.  # noqa: E501

        :return: The metrics of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :rtype: list[V2beta2MetricSpec]
        """
        ...
    
    @metrics.setter
    def metrics(self, metrics): # -> None:
        """Sets the metrics of this V2beta2HorizontalPodAutoscalerSpec.

        metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.  # noqa: E501

        :param metrics: The metrics of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :type: list[V2beta2MetricSpec]
        """
        ...
    
    @property
    def min_replicas(self): # -> None:
        """Gets the min_replicas of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501

        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.  # noqa: E501

        :return: The min_replicas of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @min_replicas.setter
    def min_replicas(self, min_replicas): # -> None:
        """Sets the min_replicas of this V2beta2HorizontalPodAutoscalerSpec.

        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.  # noqa: E501

        :param min_replicas: The min_replicas of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def scale_target_ref(self): # -> None:
        """Gets the scale_target_ref of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501


        :return: The scale_target_ref of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :rtype: V2beta2CrossVersionObjectReference
        """
        ...
    
    @scale_target_ref.setter
    def scale_target_ref(self, scale_target_ref): # -> None:
        """Sets the scale_target_ref of this V2beta2HorizontalPodAutoscalerSpec.


        :param scale_target_ref: The scale_target_ref of this V2beta2HorizontalPodAutoscalerSpec.  # noqa: E501
        :type: V2beta2CrossVersionObjectReference
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


