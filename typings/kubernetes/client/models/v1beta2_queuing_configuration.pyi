"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta2QueuingConfiguration:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, hand_size=..., queue_length_limit=..., queues=..., local_vars_configuration=...) -> None:
        """V1beta2QueuingConfiguration - a model defined in OpenAPI"""
        ...
    
    @property
    def hand_size(self): # -> None:
        """Gets the hand_size of this V1beta2QueuingConfiguration.  # noqa: E501

        `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.  # noqa: E501

        :return: The hand_size of this V1beta2QueuingConfiguration.  # noqa: E501
        :rtype: int
        """
        ...
    
    @hand_size.setter
    def hand_size(self, hand_size): # -> None:
        """Sets the hand_size of this V1beta2QueuingConfiguration.

        `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.  # noqa: E501

        :param hand_size: The hand_size of this V1beta2QueuingConfiguration.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def queue_length_limit(self): # -> None:
        """Gets the queue_length_limit of this V1beta2QueuingConfiguration.  # noqa: E501

        `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.  # noqa: E501

        :return: The queue_length_limit of this V1beta2QueuingConfiguration.  # noqa: E501
        :rtype: int
        """
        ...
    
    @queue_length_limit.setter
    def queue_length_limit(self, queue_length_limit): # -> None:
        """Sets the queue_length_limit of this V1beta2QueuingConfiguration.

        `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.  # noqa: E501

        :param queue_length_limit: The queue_length_limit of this V1beta2QueuingConfiguration.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def queues(self): # -> None:
        """Gets the queues of this V1beta2QueuingConfiguration.  # noqa: E501

        `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.  # noqa: E501

        :return: The queues of this V1beta2QueuingConfiguration.  # noqa: E501
        :rtype: int
        """
        ...
    
    @queues.setter
    def queues(self, queues): # -> None:
        """Sets the queues of this V1beta2QueuingConfiguration.

        `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.  # noqa: E501

        :param queues: The queues of this V1beta2QueuingConfiguration.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


