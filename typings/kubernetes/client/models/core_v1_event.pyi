"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class CoreV1Event:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, action=..., api_version=..., count=..., event_time=..., first_timestamp=..., involved_object=..., kind=..., last_timestamp=..., message=..., metadata=..., reason=..., related=..., reporting_component=..., reporting_instance=..., series=..., source=..., type=..., local_vars_configuration=...) -> None:
        """CoreV1Event - a model defined in OpenAPI"""
        ...
    
    @property
    def action(self): # -> None:
        """Gets the action of this CoreV1Event.  # noqa: E501

        What action was taken/failed regarding to the Regarding object.  # noqa: E501

        :return: The action of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @action.setter
    def action(self, action): # -> None:
        """Sets the action of this CoreV1Event.

        What action was taken/failed regarding to the Regarding object.  # noqa: E501

        :param action: The action of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this CoreV1Event.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this CoreV1Event.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def count(self): # -> None:
        """Gets the count of this CoreV1Event.  # noqa: E501

        The number of times this event has occurred.  # noqa: E501

        :return: The count of this CoreV1Event.  # noqa: E501
        :rtype: int
        """
        ...
    
    @count.setter
    def count(self, count): # -> None:
        """Sets the count of this CoreV1Event.

        The number of times this event has occurred.  # noqa: E501

        :param count: The count of this CoreV1Event.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def event_time(self): # -> None:
        """Gets the event_time of this CoreV1Event.  # noqa: E501

        Time when this Event was first observed.  # noqa: E501

        :return: The event_time of this CoreV1Event.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @event_time.setter
    def event_time(self, event_time): # -> None:
        """Sets the event_time of this CoreV1Event.

        Time when this Event was first observed.  # noqa: E501

        :param event_time: The event_time of this CoreV1Event.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def first_timestamp(self): # -> None:
        """Gets the first_timestamp of this CoreV1Event.  # noqa: E501

        The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)  # noqa: E501

        :return: The first_timestamp of this CoreV1Event.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @first_timestamp.setter
    def first_timestamp(self, first_timestamp): # -> None:
        """Sets the first_timestamp of this CoreV1Event.

        The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)  # noqa: E501

        :param first_timestamp: The first_timestamp of this CoreV1Event.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def involved_object(self): # -> None:
        """Gets the involved_object of this CoreV1Event.  # noqa: E501


        :return: The involved_object of this CoreV1Event.  # noqa: E501
        :rtype: V1ObjectReference
        """
        ...
    
    @involved_object.setter
    def involved_object(self, involved_object): # -> None:
        """Sets the involved_object of this CoreV1Event.


        :param involved_object: The involved_object of this CoreV1Event.  # noqa: E501
        :type: V1ObjectReference
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this CoreV1Event.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this CoreV1Event.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def last_timestamp(self): # -> None:
        """Gets the last_timestamp of this CoreV1Event.  # noqa: E501

        The time at which the most recent occurrence of this event was recorded.  # noqa: E501

        :return: The last_timestamp of this CoreV1Event.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @last_timestamp.setter
    def last_timestamp(self, last_timestamp): # -> None:
        """Sets the last_timestamp of this CoreV1Event.

        The time at which the most recent occurrence of this event was recorded.  # noqa: E501

        :param last_timestamp: The last_timestamp of this CoreV1Event.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def message(self): # -> None:
        """Gets the message of this CoreV1Event.  # noqa: E501

        A human-readable description of the status of this operation.  # noqa: E501

        :return: The message of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @message.setter
    def message(self, message): # -> None:
        """Sets the message of this CoreV1Event.

        A human-readable description of the status of this operation.  # noqa: E501

        :param message: The message of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def metadata(self): # -> None:
        """Gets the metadata of this CoreV1Event.  # noqa: E501


        :return: The metadata of this CoreV1Event.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        ...
    
    @metadata.setter
    def metadata(self, metadata): # -> None:
        """Sets the metadata of this CoreV1Event.


        :param metadata: The metadata of this CoreV1Event.  # noqa: E501
        :type: V1ObjectMeta
        """
        ...
    
    @property
    def reason(self): # -> None:
        """Gets the reason of this CoreV1Event.  # noqa: E501

        This should be a short, machine understandable string that gives the reason for the transition into the object's current status.  # noqa: E501

        :return: The reason of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @reason.setter
    def reason(self, reason): # -> None:
        """Sets the reason of this CoreV1Event.

        This should be a short, machine understandable string that gives the reason for the transition into the object's current status.  # noqa: E501

        :param reason: The reason of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def related(self): # -> None:
        """Gets the related of this CoreV1Event.  # noqa: E501


        :return: The related of this CoreV1Event.  # noqa: E501
        :rtype: V1ObjectReference
        """
        ...
    
    @related.setter
    def related(self, related): # -> None:
        """Sets the related of this CoreV1Event.


        :param related: The related of this CoreV1Event.  # noqa: E501
        :type: V1ObjectReference
        """
        ...
    
    @property
    def reporting_component(self): # -> None:
        """Gets the reporting_component of this CoreV1Event.  # noqa: E501

        Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.  # noqa: E501

        :return: The reporting_component of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @reporting_component.setter
    def reporting_component(self, reporting_component): # -> None:
        """Sets the reporting_component of this CoreV1Event.

        Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.  # noqa: E501

        :param reporting_component: The reporting_component of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def reporting_instance(self): # -> None:
        """Gets the reporting_instance of this CoreV1Event.  # noqa: E501

        ID of the controller instance, e.g. `kubelet-xyzf`.  # noqa: E501

        :return: The reporting_instance of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @reporting_instance.setter
    def reporting_instance(self, reporting_instance): # -> None:
        """Sets the reporting_instance of this CoreV1Event.

        ID of the controller instance, e.g. `kubelet-xyzf`.  # noqa: E501

        :param reporting_instance: The reporting_instance of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def series(self): # -> None:
        """Gets the series of this CoreV1Event.  # noqa: E501


        :return: The series of this CoreV1Event.  # noqa: E501
        :rtype: CoreV1EventSeries
        """
        ...
    
    @series.setter
    def series(self, series): # -> None:
        """Sets the series of this CoreV1Event.


        :param series: The series of this CoreV1Event.  # noqa: E501
        :type: CoreV1EventSeries
        """
        ...
    
    @property
    def source(self): # -> None:
        """Gets the source of this CoreV1Event.  # noqa: E501


        :return: The source of this CoreV1Event.  # noqa: E501
        :rtype: V1EventSource
        """
        ...
    
    @source.setter
    def source(self, source): # -> None:
        """Sets the source of this CoreV1Event.


        :param source: The source of this CoreV1Event.  # noqa: E501
        :type: V1EventSource
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this CoreV1Event.  # noqa: E501

        Type of this event (Normal, Warning), new types could be added in the future  # noqa: E501

        :return: The type of this CoreV1Event.  # noqa: E501
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this CoreV1Event.

        Type of this event (Normal, Warning), new types could be added in the future  # noqa: E501

        :param type: The type of this CoreV1Event.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


