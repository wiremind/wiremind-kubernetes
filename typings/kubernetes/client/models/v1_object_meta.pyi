"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ObjectMeta:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, annotations=..., cluster_name=..., creation_timestamp=..., deletion_grace_period_seconds=..., deletion_timestamp=..., finalizers=..., generate_name=..., generation=..., labels=..., managed_fields=..., name=..., namespace=..., owner_references=..., resource_version=..., self_link=..., uid=..., local_vars_configuration=...) -> None:
        """V1ObjectMeta - a model defined in OpenAPI"""
        ...
    
    @property
    def annotations(self): # -> None:
        """Gets the annotations of this V1ObjectMeta.  # noqa: E501

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :return: The annotations of this V1ObjectMeta.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @annotations.setter
    def annotations(self, annotations): # -> None:
        """Sets the annotations of this V1ObjectMeta.

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :param annotations: The annotations of this V1ObjectMeta.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def cluster_name(self): # -> None:
        """Gets the cluster_name of this V1ObjectMeta.  # noqa: E501

        Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.  The name in the go struct is changed to help clients detect accidental use.  # noqa: E501

        :return: The cluster_name of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @cluster_name.setter
    def cluster_name(self, cluster_name): # -> None:
        """Sets the cluster_name of this V1ObjectMeta.

        Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.  The name in the go struct is changed to help clients detect accidental use.  # noqa: E501

        :param cluster_name: The cluster_name of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def creation_timestamp(self): # -> None:
        """Gets the creation_timestamp of this V1ObjectMeta.  # noqa: E501

        CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The creation_timestamp of this V1ObjectMeta.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp): # -> None:
        """Sets the creation_timestamp of this V1ObjectMeta.

        CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this V1ObjectMeta.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def deletion_grace_period_seconds(self): # -> None:
        """Gets the deletion_grace_period_seconds of this V1ObjectMeta.  # noqa: E501

        Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.  # noqa: E501

        :return: The deletion_grace_period_seconds of this V1ObjectMeta.  # noqa: E501
        :rtype: int
        """
        ...
    
    @deletion_grace_period_seconds.setter
    def deletion_grace_period_seconds(self, deletion_grace_period_seconds): # -> None:
        """Sets the deletion_grace_period_seconds of this V1ObjectMeta.

        Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.  # noqa: E501

        :param deletion_grace_period_seconds: The deletion_grace_period_seconds of this V1ObjectMeta.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def deletion_timestamp(self): # -> None:
        """Gets the deletion_timestamp of this V1ObjectMeta.  # noqa: E501

        DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The deletion_timestamp of this V1ObjectMeta.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp): # -> None:
        """Sets the deletion_timestamp of this V1ObjectMeta.

        DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param deletion_timestamp: The deletion_timestamp of this V1ObjectMeta.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def finalizers(self): # -> None:
        """Gets the finalizers of this V1ObjectMeta.  # noqa: E501

        Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.  # noqa: E501

        :return: The finalizers of this V1ObjectMeta.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @finalizers.setter
    def finalizers(self, finalizers): # -> None:
        """Sets the finalizers of this V1ObjectMeta.

        Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.  # noqa: E501

        :param finalizers: The finalizers of this V1ObjectMeta.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def generate_name(self): # -> None:
        """Gets the generate_name of this V1ObjectMeta.  # noqa: E501

        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will return a 409.  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency  # noqa: E501

        :return: The generate_name of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @generate_name.setter
    def generate_name(self, generate_name): # -> None:
        """Sets the generate_name of this V1ObjectMeta.

        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will return a 409.  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency  # noqa: E501

        :param generate_name: The generate_name of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def generation(self): # -> None:
        """Gets the generation of this V1ObjectMeta.  # noqa: E501

        A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.  # noqa: E501

        :return: The generation of this V1ObjectMeta.  # noqa: E501
        :rtype: int
        """
        ...
    
    @generation.setter
    def generation(self, generation): # -> None:
        """Sets the generation of this V1ObjectMeta.

        A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.  # noqa: E501

        :param generation: The generation of this V1ObjectMeta.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def labels(self): # -> None:
        """Gets the labels of this V1ObjectMeta.  # noqa: E501

        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :return: The labels of this V1ObjectMeta.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @labels.setter
    def labels(self, labels): # -> None:
        """Sets the labels of this V1ObjectMeta.

        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :param labels: The labels of this V1ObjectMeta.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def managed_fields(self): # -> None:
        """Gets the managed_fields of this V1ObjectMeta.  # noqa: E501

        ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  # noqa: E501

        :return: The managed_fields of this V1ObjectMeta.  # noqa: E501
        :rtype: list[V1ManagedFieldsEntry]
        """
        ...
    
    @managed_fields.setter
    def managed_fields(self, managed_fields): # -> None:
        """Sets the managed_fields of this V1ObjectMeta.

        ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  # noqa: E501

        :param managed_fields: The managed_fields of this V1ObjectMeta.  # noqa: E501
        :type: list[V1ManagedFieldsEntry]
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ObjectMeta.  # noqa: E501

        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :return: The name of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ObjectMeta.

        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :param name: The name of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def namespace(self): # -> None:
        """Gets the namespace of this V1ObjectMeta.  # noqa: E501

        Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces  # noqa: E501

        :return: The namespace of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @namespace.setter
    def namespace(self, namespace): # -> None:
        """Sets the namespace of this V1ObjectMeta.

        Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces  # noqa: E501

        :param namespace: The namespace of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def owner_references(self): # -> None:
        """Gets the owner_references of this V1ObjectMeta.  # noqa: E501

        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.  # noqa: E501

        :return: The owner_references of this V1ObjectMeta.  # noqa: E501
        :rtype: list[V1OwnerReference]
        """
        ...
    
    @owner_references.setter
    def owner_references(self, owner_references): # -> None:
        """Sets the owner_references of this V1ObjectMeta.

        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.  # noqa: E501

        :param owner_references: The owner_references of this V1ObjectMeta.  # noqa: E501
        :type: list[V1OwnerReference]
        """
        ...
    
    @property
    def resource_version(self): # -> None:
        """Gets the resource_version of this V1ObjectMeta.  # noqa: E501

        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency  # noqa: E501

        :return: The resource_version of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @resource_version.setter
    def resource_version(self, resource_version): # -> None:
        """Sets the resource_version of this V1ObjectMeta.

        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency  # noqa: E501

        :param resource_version: The resource_version of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def self_link(self): # -> None:
        """Gets the self_link of this V1ObjectMeta.  # noqa: E501

        Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.  # noqa: E501

        :return: The self_link of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @self_link.setter
    def self_link(self, self_link): # -> None:
        """Sets the self_link of this V1ObjectMeta.

        Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.  # noqa: E501

        :param self_link: The self_link of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def uid(self): # -> None:
        """Gets the uid of this V1ObjectMeta.  # noqa: E501

        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :return: The uid of this V1ObjectMeta.  # noqa: E501
        :rtype: str
        """
        ...
    
    @uid.setter
    def uid(self, uid): # -> None:
        """Sets the uid of this V1ObjectMeta.

        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :param uid: The uid of this V1ObjectMeta.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


