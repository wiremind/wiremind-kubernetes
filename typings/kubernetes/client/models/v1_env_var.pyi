"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1EnvVar:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, name=..., value=..., value_from=..., local_vars_configuration=...) -> None:
        """V1EnvVar - a model defined in OpenAPI"""
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1EnvVar.  # noqa: E501

        Name of the environment variable. Must be a C_IDENTIFIER.  # noqa: E501

        :return: The name of this V1EnvVar.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1EnvVar.

        Name of the environment variable. Must be a C_IDENTIFIER.  # noqa: E501

        :param name: The name of this V1EnvVar.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def value(self): # -> None:
        """Gets the value of this V1EnvVar.  # noqa: E501

        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".  # noqa: E501

        :return: The value of this V1EnvVar.  # noqa: E501
        :rtype: str
        """
        ...
    
    @value.setter
    def value(self, value): # -> None:
        """Sets the value of this V1EnvVar.

        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".  # noqa: E501

        :param value: The value of this V1EnvVar.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def value_from(self): # -> None:
        """Gets the value_from of this V1EnvVar.  # noqa: E501


        :return: The value_from of this V1EnvVar.  # noqa: E501
        :rtype: V1EnvVarSource
        """
        ...
    
    @value_from.setter
    def value_from(self, value_from): # -> None:
        """Sets the value_from of this V1EnvVar.


        :param value_from: The value_from of this V1EnvVar.  # noqa: E501
        :type: V1EnvVarSource
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


