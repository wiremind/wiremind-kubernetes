"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ObjectReference:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., field_path=..., kind=..., name=..., namespace=..., resource_version=..., uid=..., local_vars_configuration=...) -> None:
        """V1ObjectReference - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1ObjectReference.  # noqa: E501

        API version of the referent.  # noqa: E501

        :return: The api_version of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1ObjectReference.

        API version of the referent.  # noqa: E501

        :param api_version: The api_version of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def field_path(self): # -> None:
        """Gets the field_path of this V1ObjectReference.  # noqa: E501

        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.  # noqa: E501

        :return: The field_path of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @field_path.setter
    def field_path(self, field_path): # -> None:
        """Sets the field_path of this V1ObjectReference.

        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.  # noqa: E501

        :param field_path: The field_path of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1ObjectReference.  # noqa: E501

        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1ObjectReference.

        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ObjectReference.  # noqa: E501

        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :return: The name of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ObjectReference.

        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :param name: The name of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def namespace(self): # -> None:
        """Gets the namespace of this V1ObjectReference.  # noqa: E501

        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/  # noqa: E501

        :return: The namespace of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @namespace.setter
    def namespace(self, namespace): # -> None:
        """Sets the namespace of this V1ObjectReference.

        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/  # noqa: E501

        :param namespace: The namespace of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def resource_version(self): # -> None:
        """Gets the resource_version of this V1ObjectReference.  # noqa: E501

        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency  # noqa: E501

        :return: The resource_version of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @resource_version.setter
    def resource_version(self, resource_version): # -> None:
        """Sets the resource_version of this V1ObjectReference.

        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency  # noqa: E501

        :param resource_version: The resource_version of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def uid(self): # -> None:
        """Gets the uid of this V1ObjectReference.  # noqa: E501

        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids  # noqa: E501

        :return: The uid of this V1ObjectReference.  # noqa: E501
        :rtype: str
        """
        ...
    
    @uid.setter
    def uid(self, uid): # -> None:
        """Sets the uid of this V1ObjectReference.

        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids  # noqa: E501

        :param uid: The uid of this V1ObjectReference.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


