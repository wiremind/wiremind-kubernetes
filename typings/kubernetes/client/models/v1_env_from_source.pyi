"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1EnvFromSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, config_map_ref=..., prefix=..., secret_ref=..., local_vars_configuration=...) -> None:
        """V1EnvFromSource - a model defined in OpenAPI"""
        ...
    
    @property
    def config_map_ref(self): # -> None:
        """Gets the config_map_ref of this V1EnvFromSource.  # noqa: E501


        :return: The config_map_ref of this V1EnvFromSource.  # noqa: E501
        :rtype: V1ConfigMapEnvSource
        """
        ...
    
    @config_map_ref.setter
    def config_map_ref(self, config_map_ref): # -> None:
        """Sets the config_map_ref of this V1EnvFromSource.


        :param config_map_ref: The config_map_ref of this V1EnvFromSource.  # noqa: E501
        :type: V1ConfigMapEnvSource
        """
        ...
    
    @property
    def prefix(self): # -> None:
        """Gets the prefix of this V1EnvFromSource.  # noqa: E501

        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.  # noqa: E501

        :return: The prefix of this V1EnvFromSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @prefix.setter
    def prefix(self, prefix): # -> None:
        """Sets the prefix of this V1EnvFromSource.

        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.  # noqa: E501

        :param prefix: The prefix of this V1EnvFromSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def secret_ref(self): # -> None:
        """Gets the secret_ref of this V1EnvFromSource.  # noqa: E501


        :return: The secret_ref of this V1EnvFromSource.  # noqa: E501
        :rtype: V1SecretEnvSource
        """
        ...
    
    @secret_ref.setter
    def secret_ref(self, secret_ref): # -> None:
        """Sets the secret_ref of this V1EnvFromSource.


        :param secret_ref: The secret_ref of this V1EnvFromSource.  # noqa: E501
        :type: V1SecretEnvSource
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


