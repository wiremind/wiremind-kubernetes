"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1RollingUpdateStatefulSetStrategy:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, max_unavailable=..., partition=..., local_vars_configuration=...) -> None:
        """V1RollingUpdateStatefulSetStrategy - a model defined in OpenAPI"""
        ...
    
    @property
    def max_unavailable(self): # -> None:
        """Gets the max_unavailable of this V1RollingUpdateStatefulSetStrategy.  # noqa: E501

        The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.  # noqa: E501

        :return: The max_unavailable of this V1RollingUpdateStatefulSetStrategy.  # noqa: E501
        :rtype: object
        """
        ...
    
    @max_unavailable.setter
    def max_unavailable(self, max_unavailable): # -> None:
        """Sets the max_unavailable of this V1RollingUpdateStatefulSetStrategy.

        The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.  # noqa: E501

        :param max_unavailable: The max_unavailable of this V1RollingUpdateStatefulSetStrategy.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def partition(self): # -> None:
        """Gets the partition of this V1RollingUpdateStatefulSetStrategy.  # noqa: E501

        Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.  # noqa: E501

        :return: The partition of this V1RollingUpdateStatefulSetStrategy.  # noqa: E501
        :rtype: int
        """
        ...
    
    @partition.setter
    def partition(self, partition): # -> None:
        """Sets the partition of this V1RollingUpdateStatefulSetStrategy.

        Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.  # noqa: E501

        :param partition: The partition of this V1RollingUpdateStatefulSetStrategy.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


