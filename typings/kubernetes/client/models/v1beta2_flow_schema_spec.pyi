"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta2FlowSchemaSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, distinguisher_method=..., matching_precedence=..., priority_level_configuration=..., rules=..., local_vars_configuration=...) -> None:
        """V1beta2FlowSchemaSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def distinguisher_method(self): # -> None:
        """Gets the distinguisher_method of this V1beta2FlowSchemaSpec.  # noqa: E501


        :return: The distinguisher_method of this V1beta2FlowSchemaSpec.  # noqa: E501
        :rtype: V1beta2FlowDistinguisherMethod
        """
        ...
    
    @distinguisher_method.setter
    def distinguisher_method(self, distinguisher_method): # -> None:
        """Sets the distinguisher_method of this V1beta2FlowSchemaSpec.


        :param distinguisher_method: The distinguisher_method of this V1beta2FlowSchemaSpec.  # noqa: E501
        :type: V1beta2FlowDistinguisherMethod
        """
        ...
    
    @property
    def matching_precedence(self): # -> None:
        """Gets the matching_precedence of this V1beta2FlowSchemaSpec.  # noqa: E501

        `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.  # noqa: E501

        :return: The matching_precedence of this V1beta2FlowSchemaSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @matching_precedence.setter
    def matching_precedence(self, matching_precedence): # -> None:
        """Sets the matching_precedence of this V1beta2FlowSchemaSpec.

        `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.  # noqa: E501

        :param matching_precedence: The matching_precedence of this V1beta2FlowSchemaSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def priority_level_configuration(self): # -> None:
        """Gets the priority_level_configuration of this V1beta2FlowSchemaSpec.  # noqa: E501


        :return: The priority_level_configuration of this V1beta2FlowSchemaSpec.  # noqa: E501
        :rtype: V1beta2PriorityLevelConfigurationReference
        """
        ...
    
    @priority_level_configuration.setter
    def priority_level_configuration(self, priority_level_configuration): # -> None:
        """Sets the priority_level_configuration of this V1beta2FlowSchemaSpec.


        :param priority_level_configuration: The priority_level_configuration of this V1beta2FlowSchemaSpec.  # noqa: E501
        :type: V1beta2PriorityLevelConfigurationReference
        """
        ...
    
    @property
    def rules(self): # -> None:
        """Gets the rules of this V1beta2FlowSchemaSpec.  # noqa: E501

        `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.  # noqa: E501

        :return: The rules of this V1beta2FlowSchemaSpec.  # noqa: E501
        :rtype: list[V1beta2PolicyRulesWithSubjects]
        """
        ...
    
    @rules.setter
    def rules(self, rules): # -> None:
        """Sets the rules of this V1beta2FlowSchemaSpec.

        `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.  # noqa: E501

        :param rules: The rules of this V1beta2FlowSchemaSpec.  # noqa: E501
        :type: list[V1beta2PolicyRulesWithSubjects]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


