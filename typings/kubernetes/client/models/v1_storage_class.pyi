"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1StorageClass:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, allow_volume_expansion=..., allowed_topologies=..., api_version=..., kind=..., metadata=..., mount_options=..., parameters=..., provisioner=..., reclaim_policy=..., volume_binding_mode=..., local_vars_configuration=...) -> None:
        """V1StorageClass - a model defined in OpenAPI"""
        ...
    
    @property
    def allow_volume_expansion(self): # -> None:
        """Gets the allow_volume_expansion of this V1StorageClass.  # noqa: E501

        AllowVolumeExpansion shows whether the storage class allow volume expand  # noqa: E501

        :return: The allow_volume_expansion of this V1StorageClass.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @allow_volume_expansion.setter
    def allow_volume_expansion(self, allow_volume_expansion): # -> None:
        """Sets the allow_volume_expansion of this V1StorageClass.

        AllowVolumeExpansion shows whether the storage class allow volume expand  # noqa: E501

        :param allow_volume_expansion: The allow_volume_expansion of this V1StorageClass.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def allowed_topologies(self): # -> None:
        """Gets the allowed_topologies of this V1StorageClass.  # noqa: E501

        Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :return: The allowed_topologies of this V1StorageClass.  # noqa: E501
        :rtype: list[V1TopologySelectorTerm]
        """
        ...
    
    @allowed_topologies.setter
    def allowed_topologies(self, allowed_topologies): # -> None:
        """Sets the allowed_topologies of this V1StorageClass.

        Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :param allowed_topologies: The allowed_topologies of this V1StorageClass.  # noqa: E501
        :type: list[V1TopologySelectorTerm]
        """
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1StorageClass.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1StorageClass.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1StorageClass.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1StorageClass.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1StorageClass.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1StorageClass.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1StorageClass.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1StorageClass.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def metadata(self): # -> None:
        """Gets the metadata of this V1StorageClass.  # noqa: E501


        :return: The metadata of this V1StorageClass.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        ...
    
    @metadata.setter
    def metadata(self, metadata): # -> None:
        """Sets the metadata of this V1StorageClass.


        :param metadata: The metadata of this V1StorageClass.  # noqa: E501
        :type: V1ObjectMeta
        """
        ...
    
    @property
    def mount_options(self): # -> None:
        """Gets the mount_options of this V1StorageClass.  # noqa: E501

        Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.  # noqa: E501

        :return: The mount_options of this V1StorageClass.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @mount_options.setter
    def mount_options(self, mount_options): # -> None:
        """Sets the mount_options of this V1StorageClass.

        Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.  # noqa: E501

        :param mount_options: The mount_options of this V1StorageClass.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def parameters(self): # -> None:
        """Gets the parameters of this V1StorageClass.  # noqa: E501

        Parameters holds the parameters for the provisioner that should create volumes of this storage class.  # noqa: E501

        :return: The parameters of this V1StorageClass.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @parameters.setter
    def parameters(self, parameters): # -> None:
        """Sets the parameters of this V1StorageClass.

        Parameters holds the parameters for the provisioner that should create volumes of this storage class.  # noqa: E501

        :param parameters: The parameters of this V1StorageClass.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def provisioner(self): # -> None:
        """Gets the provisioner of this V1StorageClass.  # noqa: E501

        Provisioner indicates the type of the provisioner.  # noqa: E501

        :return: The provisioner of this V1StorageClass.  # noqa: E501
        :rtype: str
        """
        ...
    
    @provisioner.setter
    def provisioner(self, provisioner): # -> None:
        """Sets the provisioner of this V1StorageClass.

        Provisioner indicates the type of the provisioner.  # noqa: E501

        :param provisioner: The provisioner of this V1StorageClass.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def reclaim_policy(self): # -> None:
        """Gets the reclaim_policy of this V1StorageClass.  # noqa: E501

        Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.  # noqa: E501

        :return: The reclaim_policy of this V1StorageClass.  # noqa: E501
        :rtype: str
        """
        ...
    
    @reclaim_policy.setter
    def reclaim_policy(self, reclaim_policy): # -> None:
        """Sets the reclaim_policy of this V1StorageClass.

        Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.  # noqa: E501

        :param reclaim_policy: The reclaim_policy of this V1StorageClass.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def volume_binding_mode(self): # -> None:
        """Gets the volume_binding_mode of this V1StorageClass.  # noqa: E501

        VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :return: The volume_binding_mode of this V1StorageClass.  # noqa: E501
        :rtype: str
        """
        ...
    
    @volume_binding_mode.setter
    def volume_binding_mode(self, volume_binding_mode): # -> None:
        """Sets the volume_binding_mode of this V1StorageClass.

        VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :param volume_binding_mode: The volume_binding_mode of this V1StorageClass.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


