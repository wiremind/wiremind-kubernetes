"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1NodeConfigStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, active=..., assigned=..., error=..., last_known_good=..., local_vars_configuration=...) -> None:
        """V1NodeConfigStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def active(self): # -> None:
        """Gets the active of this V1NodeConfigStatus.  # noqa: E501


        :return: The active of this V1NodeConfigStatus.  # noqa: E501
        :rtype: V1NodeConfigSource
        """
        ...
    
    @active.setter
    def active(self, active): # -> None:
        """Sets the active of this V1NodeConfigStatus.


        :param active: The active of this V1NodeConfigStatus.  # noqa: E501
        :type: V1NodeConfigSource
        """
        ...
    
    @property
    def assigned(self): # -> None:
        """Gets the assigned of this V1NodeConfigStatus.  # noqa: E501


        :return: The assigned of this V1NodeConfigStatus.  # noqa: E501
        :rtype: V1NodeConfigSource
        """
        ...
    
    @assigned.setter
    def assigned(self, assigned): # -> None:
        """Sets the assigned of this V1NodeConfigStatus.


        :param assigned: The assigned of this V1NodeConfigStatus.  # noqa: E501
        :type: V1NodeConfigSource
        """
        ...
    
    @property
    def error(self): # -> None:
        """Gets the error of this V1NodeConfigStatus.  # noqa: E501

        Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.  # noqa: E501

        :return: The error of this V1NodeConfigStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @error.setter
    def error(self, error): # -> None:
        """Sets the error of this V1NodeConfigStatus.

        Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.  # noqa: E501

        :param error: The error of this V1NodeConfigStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def last_known_good(self): # -> None:
        """Gets the last_known_good of this V1NodeConfigStatus.  # noqa: E501


        :return: The last_known_good of this V1NodeConfigStatus.  # noqa: E501
        :rtype: V1NodeConfigSource
        """
        ...
    
    @last_known_good.setter
    def last_known_good(self, last_known_good): # -> None:
        """Sets the last_known_good of this V1NodeConfigStatus.


        :param last_known_good: The last_known_good of this V1NodeConfigStatus.  # noqa: E501
        :type: V1NodeConfigSource
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


