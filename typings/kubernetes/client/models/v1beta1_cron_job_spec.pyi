"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta1CronJobSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, concurrency_policy=..., failed_jobs_history_limit=..., job_template=..., schedule=..., starting_deadline_seconds=..., successful_jobs_history_limit=..., suspend=..., time_zone=..., local_vars_configuration=...) -> None:
        """V1beta1CronJobSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def concurrency_policy(self): # -> None:
        """Gets the concurrency_policy of this V1beta1CronJobSpec.  # noqa: E501

        Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one  # noqa: E501

        :return: The concurrency_policy of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @concurrency_policy.setter
    def concurrency_policy(self, concurrency_policy): # -> None:
        """Sets the concurrency_policy of this V1beta1CronJobSpec.

        Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one  # noqa: E501

        :param concurrency_policy: The concurrency_policy of this V1beta1CronJobSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def failed_jobs_history_limit(self): # -> None:
        """Gets the failed_jobs_history_limit of this V1beta1CronJobSpec.  # noqa: E501

        The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.  # noqa: E501

        :return: The failed_jobs_history_limit of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @failed_jobs_history_limit.setter
    def failed_jobs_history_limit(self, failed_jobs_history_limit): # -> None:
        """Sets the failed_jobs_history_limit of this V1beta1CronJobSpec.

        The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.  # noqa: E501

        :param failed_jobs_history_limit: The failed_jobs_history_limit of this V1beta1CronJobSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def job_template(self): # -> None:
        """Gets the job_template of this V1beta1CronJobSpec.  # noqa: E501


        :return: The job_template of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: V1beta1JobTemplateSpec
        """
        ...
    
    @job_template.setter
    def job_template(self, job_template): # -> None:
        """Sets the job_template of this V1beta1CronJobSpec.


        :param job_template: The job_template of this V1beta1CronJobSpec.  # noqa: E501
        :type: V1beta1JobTemplateSpec
        """
        ...
    
    @property
    def schedule(self): # -> None:
        """Gets the schedule of this V1beta1CronJobSpec.  # noqa: E501

        The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.  # noqa: E501

        :return: The schedule of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @schedule.setter
    def schedule(self, schedule): # -> None:
        """Sets the schedule of this V1beta1CronJobSpec.

        The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.  # noqa: E501

        :param schedule: The schedule of this V1beta1CronJobSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def starting_deadline_seconds(self): # -> None:
        """Gets the starting_deadline_seconds of this V1beta1CronJobSpec.  # noqa: E501

        Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.  # noqa: E501

        :return: The starting_deadline_seconds of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @starting_deadline_seconds.setter
    def starting_deadline_seconds(self, starting_deadline_seconds): # -> None:
        """Sets the starting_deadline_seconds of this V1beta1CronJobSpec.

        Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.  # noqa: E501

        :param starting_deadline_seconds: The starting_deadline_seconds of this V1beta1CronJobSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def successful_jobs_history_limit(self): # -> None:
        """Gets the successful_jobs_history_limit of this V1beta1CronJobSpec.  # noqa: E501

        The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.  # noqa: E501

        :return: The successful_jobs_history_limit of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @successful_jobs_history_limit.setter
    def successful_jobs_history_limit(self, successful_jobs_history_limit): # -> None:
        """Sets the successful_jobs_history_limit of this V1beta1CronJobSpec.

        The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.  # noqa: E501

        :param successful_jobs_history_limit: The successful_jobs_history_limit of this V1beta1CronJobSpec.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def suspend(self): # -> None:
        """Gets the suspend of this V1beta1CronJobSpec.  # noqa: E501

        This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.  # noqa: E501

        :return: The suspend of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @suspend.setter
    def suspend(self, suspend): # -> None:
        """Sets the suspend of this V1beta1CronJobSpec.

        This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.  # noqa: E501

        :param suspend: The suspend of this V1beta1CronJobSpec.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def time_zone(self): # -> None:
        """Gets the time_zone of this V1beta1CronJobSpec.  # noqa: E501

        The time zone for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will rely on the time zone of the kube-controller-manager process. ALPHA: This field is in alpha and must be enabled via the `CronJobTimeZone` feature gate.  # noqa: E501

        :return: The time_zone of this V1beta1CronJobSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @time_zone.setter
    def time_zone(self, time_zone): # -> None:
        """Sets the time_zone of this V1beta1CronJobSpec.

        The time zone for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will rely on the time zone of the kube-controller-manager process. ALPHA: This field is in alpha and must be enabled via the `CronJobTimeZone` feature gate.  # noqa: E501

        :param time_zone: The time_zone of this V1beta1CronJobSpec.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


