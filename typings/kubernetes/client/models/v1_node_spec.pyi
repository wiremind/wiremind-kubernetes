"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1NodeSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, config_source=..., external_id=..., pod_cidr=..., pod_cid_rs=..., provider_id=..., taints=..., unschedulable=..., local_vars_configuration=...) -> None:
        """V1NodeSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def config_source(self): # -> None:
        """Gets the config_source of this V1NodeSpec.  # noqa: E501


        :return: The config_source of this V1NodeSpec.  # noqa: E501
        :rtype: V1NodeConfigSource
        """
        ...
    
    @config_source.setter
    def config_source(self, config_source): # -> None:
        """Sets the config_source of this V1NodeSpec.


        :param config_source: The config_source of this V1NodeSpec.  # noqa: E501
        :type: V1NodeConfigSource
        """
        ...
    
    @property
    def external_id(self): # -> None:
        """Gets the external_id of this V1NodeSpec.  # noqa: E501

        Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966  # noqa: E501

        :return: The external_id of this V1NodeSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @external_id.setter
    def external_id(self, external_id): # -> None:
        """Sets the external_id of this V1NodeSpec.

        Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966  # noqa: E501

        :param external_id: The external_id of this V1NodeSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def pod_cidr(self): # -> None:
        """Gets the pod_cidr of this V1NodeSpec.  # noqa: E501

        PodCIDR represents the pod IP range assigned to the node.  # noqa: E501

        :return: The pod_cidr of this V1NodeSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @pod_cidr.setter
    def pod_cidr(self, pod_cidr): # -> None:
        """Sets the pod_cidr of this V1NodeSpec.

        PodCIDR represents the pod IP range assigned to the node.  # noqa: E501

        :param pod_cidr: The pod_cidr of this V1NodeSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def pod_cid_rs(self): # -> None:
        """Gets the pod_cid_rs of this V1NodeSpec.  # noqa: E501

        podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.  # noqa: E501

        :return: The pod_cid_rs of this V1NodeSpec.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @pod_cid_rs.setter
    def pod_cid_rs(self, pod_cid_rs): # -> None:
        """Sets the pod_cid_rs of this V1NodeSpec.

        podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.  # noqa: E501

        :param pod_cid_rs: The pod_cid_rs of this V1NodeSpec.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def provider_id(self): # -> None:
        """Gets the provider_id of this V1NodeSpec.  # noqa: E501

        ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>  # noqa: E501

        :return: The provider_id of this V1NodeSpec.  # noqa: E501
        :rtype: str
        """
        ...
    
    @provider_id.setter
    def provider_id(self, provider_id): # -> None:
        """Sets the provider_id of this V1NodeSpec.

        ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>  # noqa: E501

        :param provider_id: The provider_id of this V1NodeSpec.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def taints(self): # -> None:
        """Gets the taints of this V1NodeSpec.  # noqa: E501

        If specified, the node's taints.  # noqa: E501

        :return: The taints of this V1NodeSpec.  # noqa: E501
        :rtype: list[V1Taint]
        """
        ...
    
    @taints.setter
    def taints(self, taints): # -> None:
        """Sets the taints of this V1NodeSpec.

        If specified, the node's taints.  # noqa: E501

        :param taints: The taints of this V1NodeSpec.  # noqa: E501
        :type: list[V1Taint]
        """
        ...
    
    @property
    def unschedulable(self): # -> None:
        """Gets the unschedulable of this V1NodeSpec.  # noqa: E501

        Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration  # noqa: E501

        :return: The unschedulable of this V1NodeSpec.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @unschedulable.setter
    def unschedulable(self, unschedulable): # -> None:
        """Sets the unschedulable of this V1NodeSpec.

        Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration  # noqa: E501

        :param unschedulable: The unschedulable of this V1NodeSpec.  # noqa: E501
        :type: bool
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


