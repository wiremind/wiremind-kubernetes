"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ServiceAccount:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., automount_service_account_token=..., image_pull_secrets=..., kind=..., metadata=..., secrets=..., local_vars_configuration=...) -> None:
        """V1ServiceAccount - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1ServiceAccount.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1ServiceAccount.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1ServiceAccount.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1ServiceAccount.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def automount_service_account_token(self): # -> None:
        """Gets the automount_service_account_token of this V1ServiceAccount.  # noqa: E501

        AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.  # noqa: E501

        :return: The automount_service_account_token of this V1ServiceAccount.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @automount_service_account_token.setter
    def automount_service_account_token(self, automount_service_account_token): # -> None:
        """Sets the automount_service_account_token of this V1ServiceAccount.

        AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.  # noqa: E501

        :param automount_service_account_token: The automount_service_account_token of this V1ServiceAccount.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def image_pull_secrets(self): # -> None:
        """Gets the image_pull_secrets of this V1ServiceAccount.  # noqa: E501

        ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this V1ServiceAccount.  # noqa: E501
        :rtype: list[V1LocalObjectReference]
        """
        ...
    
    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets): # -> None:
        """Sets the image_pull_secrets of this V1ServiceAccount.

        ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this V1ServiceAccount.  # noqa: E501
        :type: list[V1LocalObjectReference]
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1ServiceAccount.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1ServiceAccount.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1ServiceAccount.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1ServiceAccount.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def metadata(self): # -> None:
        """Gets the metadata of this V1ServiceAccount.  # noqa: E501


        :return: The metadata of this V1ServiceAccount.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        ...
    
    @metadata.setter
    def metadata(self, metadata): # -> None:
        """Sets the metadata of this V1ServiceAccount.


        :param metadata: The metadata of this V1ServiceAccount.  # noqa: E501
        :type: V1ObjectMeta
        """
        ...
    
    @property
    def secrets(self): # -> None:
        """Gets the secrets of this V1ServiceAccount.  # noqa: E501

        Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret  # noqa: E501

        :return: The secrets of this V1ServiceAccount.  # noqa: E501
        :rtype: list[V1ObjectReference]
        """
        ...
    
    @secrets.setter
    def secrets(self, secrets): # -> None:
        """Sets the secrets of this V1ServiceAccount.

        Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret  # noqa: E501

        :param secrets: The secrets of this V1ServiceAccount.  # noqa: E501
        :type: list[V1ObjectReference]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


