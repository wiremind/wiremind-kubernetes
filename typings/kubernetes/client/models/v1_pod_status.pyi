"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1PodStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, conditions=..., container_statuses=..., ephemeral_container_statuses=..., host_ip=..., init_container_statuses=..., message=..., nominated_node_name=..., phase=..., pod_ip=..., pod_i_ps=..., qos_class=..., reason=..., start_time=..., local_vars_configuration=...) -> None:
        """V1PodStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1PodStatus.  # noqa: E501

        Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions  # noqa: E501

        :return: The conditions of this V1PodStatus.  # noqa: E501
        :rtype: list[V1PodCondition]
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1PodStatus.

        Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions  # noqa: E501

        :param conditions: The conditions of this V1PodStatus.  # noqa: E501
        :type: list[V1PodCondition]
        """
        ...
    
    @property
    def container_statuses(self): # -> None:
        """Gets the container_statuses of this V1PodStatus.  # noqa: E501

        The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :return: The container_statuses of this V1PodStatus.  # noqa: E501
        :rtype: list[V1ContainerStatus]
        """
        ...
    
    @container_statuses.setter
    def container_statuses(self, container_statuses): # -> None:
        """Sets the container_statuses of this V1PodStatus.

        The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :param container_statuses: The container_statuses of this V1PodStatus.  # noqa: E501
        :type: list[V1ContainerStatus]
        """
        ...
    
    @property
    def ephemeral_container_statuses(self): # -> None:
        """Gets the ephemeral_container_statuses of this V1PodStatus.  # noqa: E501

        Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.  # noqa: E501

        :return: The ephemeral_container_statuses of this V1PodStatus.  # noqa: E501
        :rtype: list[V1ContainerStatus]
        """
        ...
    
    @ephemeral_container_statuses.setter
    def ephemeral_container_statuses(self, ephemeral_container_statuses): # -> None:
        """Sets the ephemeral_container_statuses of this V1PodStatus.

        Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.  # noqa: E501

        :param ephemeral_container_statuses: The ephemeral_container_statuses of this V1PodStatus.  # noqa: E501
        :type: list[V1ContainerStatus]
        """
        ...
    
    @property
    def host_ip(self): # -> None:
        """Gets the host_ip of this V1PodStatus.  # noqa: E501

        IP address of the host to which the pod is assigned. Empty if not yet scheduled.  # noqa: E501

        :return: The host_ip of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @host_ip.setter
    def host_ip(self, host_ip): # -> None:
        """Sets the host_ip of this V1PodStatus.

        IP address of the host to which the pod is assigned. Empty if not yet scheduled.  # noqa: E501

        :param host_ip: The host_ip of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def init_container_statuses(self): # -> None:
        """Gets the init_container_statuses of this V1PodStatus.  # noqa: E501

        The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :return: The init_container_statuses of this V1PodStatus.  # noqa: E501
        :rtype: list[V1ContainerStatus]
        """
        ...
    
    @init_container_statuses.setter
    def init_container_statuses(self, init_container_statuses): # -> None:
        """Sets the init_container_statuses of this V1PodStatus.

        The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :param init_container_statuses: The init_container_statuses of this V1PodStatus.  # noqa: E501
        :type: list[V1ContainerStatus]
        """
        ...
    
    @property
    def message(self): # -> None:
        """Gets the message of this V1PodStatus.  # noqa: E501

        A human readable message indicating details about why the pod is in this condition.  # noqa: E501

        :return: The message of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @message.setter
    def message(self, message): # -> None:
        """Sets the message of this V1PodStatus.

        A human readable message indicating details about why the pod is in this condition.  # noqa: E501

        :param message: The message of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def nominated_node_name(self): # -> None:
        """Gets the nominated_node_name of this V1PodStatus.  # noqa: E501

        nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.  # noqa: E501

        :return: The nominated_node_name of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @nominated_node_name.setter
    def nominated_node_name(self, nominated_node_name): # -> None:
        """Sets the nominated_node_name of this V1PodStatus.

        nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.  # noqa: E501

        :param nominated_node_name: The nominated_node_name of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def phase(self): # -> None:
        """Gets the phase of this V1PodStatus.  # noqa: E501

        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase    # noqa: E501

        :return: The phase of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @phase.setter
    def phase(self, phase): # -> None:
        """Sets the phase of this V1PodStatus.

        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase    # noqa: E501

        :param phase: The phase of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def pod_ip(self): # -> None:
        """Gets the pod_ip of this V1PodStatus.  # noqa: E501

        IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.  # noqa: E501

        :return: The pod_ip of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @pod_ip.setter
    def pod_ip(self, pod_ip): # -> None:
        """Sets the pod_ip of this V1PodStatus.

        IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.  # noqa: E501

        :param pod_ip: The pod_ip of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def pod_i_ps(self): # -> None:
        """Gets the pod_i_ps of this V1PodStatus.  # noqa: E501

        podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.  # noqa: E501

        :return: The pod_i_ps of this V1PodStatus.  # noqa: E501
        :rtype: list[V1PodIP]
        """
        ...
    
    @pod_i_ps.setter
    def pod_i_ps(self, pod_i_ps): # -> None:
        """Sets the pod_i_ps of this V1PodStatus.

        podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.  # noqa: E501

        :param pod_i_ps: The pod_i_ps of this V1PodStatus.  # noqa: E501
        :type: list[V1PodIP]
        """
        ...
    
    @property
    def qos_class(self): # -> None:
        """Gets the qos_class of this V1PodStatus.  # noqa: E501

        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md    # noqa: E501

        :return: The qos_class of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @qos_class.setter
    def qos_class(self, qos_class): # -> None:
        """Sets the qos_class of this V1PodStatus.

        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md    # noqa: E501

        :param qos_class: The qos_class of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def reason(self): # -> None:
        """Gets the reason of this V1PodStatus.  # noqa: E501

        A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'  # noqa: E501

        :return: The reason of this V1PodStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @reason.setter
    def reason(self, reason): # -> None:
        """Sets the reason of this V1PodStatus.

        A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'  # noqa: E501

        :param reason: The reason of this V1PodStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def start_time(self): # -> None:
        """Gets the start_time of this V1PodStatus.  # noqa: E501

        RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.  # noqa: E501

        :return: The start_time of this V1PodStatus.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @start_time.setter
    def start_time(self, start_time): # -> None:
        """Sets the start_time of this V1PodStatus.

        RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.  # noqa: E501

        :param start_time: The start_time of this V1PodStatus.  # noqa: E501
        :type: datetime
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


