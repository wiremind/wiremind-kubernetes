"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1PodSecurityContext:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, fs_group=..., fs_group_change_policy=..., run_as_group=..., run_as_non_root=..., run_as_user=..., se_linux_options=..., seccomp_profile=..., supplemental_groups=..., sysctls=..., windows_options=..., local_vars_configuration=...) -> None:
        """V1PodSecurityContext - a model defined in OpenAPI"""
        ...
    
    @property
    def fs_group(self): # -> None:
        """Gets the fs_group of this V1PodSecurityContext.  # noqa: E501

        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The fs_group of this V1PodSecurityContext.  # noqa: E501
        :rtype: int
        """
        ...
    
    @fs_group.setter
    def fs_group(self, fs_group): # -> None:
        """Sets the fs_group of this V1PodSecurityContext.

        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param fs_group: The fs_group of this V1PodSecurityContext.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def fs_group_change_policy(self): # -> None:
        """Gets the fs_group_change_policy of this V1PodSecurityContext.  # noqa: E501

        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The fs_group_change_policy of this V1PodSecurityContext.  # noqa: E501
        :rtype: str
        """
        ...
    
    @fs_group_change_policy.setter
    def fs_group_change_policy(self, fs_group_change_policy): # -> None:
        """Sets the fs_group_change_policy of this V1PodSecurityContext.

        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param fs_group_change_policy: The fs_group_change_policy of this V1PodSecurityContext.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def run_as_group(self): # -> None:
        """Gets the run_as_group of this V1PodSecurityContext.  # noqa: E501

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The run_as_group of this V1PodSecurityContext.  # noqa: E501
        :rtype: int
        """
        ...
    
    @run_as_group.setter
    def run_as_group(self, run_as_group): # -> None:
        """Sets the run_as_group of this V1PodSecurityContext.

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param run_as_group: The run_as_group of this V1PodSecurityContext.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def run_as_non_root(self): # -> None:
        """Gets the run_as_non_root of this V1PodSecurityContext.  # noqa: E501

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The run_as_non_root of this V1PodSecurityContext.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @run_as_non_root.setter
    def run_as_non_root(self, run_as_non_root): # -> None:
        """Sets the run_as_non_root of this V1PodSecurityContext.

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param run_as_non_root: The run_as_non_root of this V1PodSecurityContext.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def run_as_user(self): # -> None:
        """Gets the run_as_user of this V1PodSecurityContext.  # noqa: E501

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The run_as_user of this V1PodSecurityContext.  # noqa: E501
        :rtype: int
        """
        ...
    
    @run_as_user.setter
    def run_as_user(self, run_as_user): # -> None:
        """Sets the run_as_user of this V1PodSecurityContext.

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param run_as_user: The run_as_user of this V1PodSecurityContext.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def se_linux_options(self): # -> None:
        """Gets the se_linux_options of this V1PodSecurityContext.  # noqa: E501


        :return: The se_linux_options of this V1PodSecurityContext.  # noqa: E501
        :rtype: V1SELinuxOptions
        """
        ...
    
    @se_linux_options.setter
    def se_linux_options(self, se_linux_options): # -> None:
        """Sets the se_linux_options of this V1PodSecurityContext.


        :param se_linux_options: The se_linux_options of this V1PodSecurityContext.  # noqa: E501
        :type: V1SELinuxOptions
        """
        ...
    
    @property
    def seccomp_profile(self): # -> None:
        """Gets the seccomp_profile of this V1PodSecurityContext.  # noqa: E501


        :return: The seccomp_profile of this V1PodSecurityContext.  # noqa: E501
        :rtype: V1SeccompProfile
        """
        ...
    
    @seccomp_profile.setter
    def seccomp_profile(self, seccomp_profile): # -> None:
        """Sets the seccomp_profile of this V1PodSecurityContext.


        :param seccomp_profile: The seccomp_profile of this V1PodSecurityContext.  # noqa: E501
        :type: V1SeccompProfile
        """
        ...
    
    @property
    def supplemental_groups(self): # -> None:
        """Gets the supplemental_groups of this V1PodSecurityContext.  # noqa: E501

        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The supplemental_groups of this V1PodSecurityContext.  # noqa: E501
        :rtype: list[int]
        """
        ...
    
    @supplemental_groups.setter
    def supplemental_groups(self, supplemental_groups): # -> None:
        """Sets the supplemental_groups of this V1PodSecurityContext.

        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param supplemental_groups: The supplemental_groups of this V1PodSecurityContext.  # noqa: E501
        :type: list[int]
        """
        ...
    
    @property
    def sysctls(self): # -> None:
        """Gets the sysctls of this V1PodSecurityContext.  # noqa: E501

        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :return: The sysctls of this V1PodSecurityContext.  # noqa: E501
        :rtype: list[V1Sysctl]
        """
        ...
    
    @sysctls.setter
    def sysctls(self, sysctls): # -> None:
        """Sets the sysctls of this V1PodSecurityContext.

        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.  # noqa: E501

        :param sysctls: The sysctls of this V1PodSecurityContext.  # noqa: E501
        :type: list[V1Sysctl]
        """
        ...
    
    @property
    def windows_options(self): # -> None:
        """Gets the windows_options of this V1PodSecurityContext.  # noqa: E501


        :return: The windows_options of this V1PodSecurityContext.  # noqa: E501
        :rtype: V1WindowsSecurityContextOptions
        """
        ...
    
    @windows_options.setter
    def windows_options(self, windows_options): # -> None:
        """Sets the windows_options of this V1PodSecurityContext.


        :param windows_options: The windows_options of this V1PodSecurityContext.  # noqa: E501
        :type: V1WindowsSecurityContextOptions
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


