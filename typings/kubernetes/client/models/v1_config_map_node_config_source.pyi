"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ConfigMapNodeConfigSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, kubelet_config_key=..., name=..., namespace=..., resource_version=..., uid=..., local_vars_configuration=...) -> None:
        """V1ConfigMapNodeConfigSource - a model defined in OpenAPI"""
        ...
    
    @property
    def kubelet_config_key(self): # -> None:
        """Gets the kubelet_config_key of this V1ConfigMapNodeConfigSource.  # noqa: E501

        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.  # noqa: E501

        :return: The kubelet_config_key of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kubelet_config_key.setter
    def kubelet_config_key(self, kubelet_config_key): # -> None:
        """Sets the kubelet_config_key of this V1ConfigMapNodeConfigSource.

        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.  # noqa: E501

        :param kubelet_config_key: The kubelet_config_key of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ConfigMapNodeConfigSource.  # noqa: E501

        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :return: The name of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ConfigMapNodeConfigSource.

        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :param name: The name of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def namespace(self): # -> None:
        """Gets the namespace of this V1ConfigMapNodeConfigSource.  # noqa: E501

        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :return: The namespace of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @namespace.setter
    def namespace(self, namespace): # -> None:
        """Sets the namespace of this V1ConfigMapNodeConfigSource.

        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :param namespace: The namespace of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def resource_version(self): # -> None:
        """Gets the resource_version of this V1ConfigMapNodeConfigSource.  # noqa: E501

        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :return: The resource_version of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @resource_version.setter
    def resource_version(self, resource_version): # -> None:
        """Sets the resource_version of this V1ConfigMapNodeConfigSource.

        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :param resource_version: The resource_version of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def uid(self): # -> None:
        """Gets the uid of this V1ConfigMapNodeConfigSource.  # noqa: E501

        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :return: The uid of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @uid.setter
    def uid(self, uid): # -> None:
        """Sets the uid of this V1ConfigMapNodeConfigSource.

        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :param uid: The uid of this V1ConfigMapNodeConfigSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


