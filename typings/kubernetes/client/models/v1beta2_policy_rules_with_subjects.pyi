"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta2PolicyRulesWithSubjects:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, non_resource_rules=..., resource_rules=..., subjects=..., local_vars_configuration=...) -> None:
        """V1beta2PolicyRulesWithSubjects - a model defined in OpenAPI"""
        ...
    
    @property
    def non_resource_rules(self): # -> None:
        """Gets the non_resource_rules of this V1beta2PolicyRulesWithSubjects.  # noqa: E501

        `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.  # noqa: E501

        :return: The non_resource_rules of this V1beta2PolicyRulesWithSubjects.  # noqa: E501
        :rtype: list[V1beta2NonResourcePolicyRule]
        """
        ...
    
    @non_resource_rules.setter
    def non_resource_rules(self, non_resource_rules): # -> None:
        """Sets the non_resource_rules of this V1beta2PolicyRulesWithSubjects.

        `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.  # noqa: E501

        :param non_resource_rules: The non_resource_rules of this V1beta2PolicyRulesWithSubjects.  # noqa: E501
        :type: list[V1beta2NonResourcePolicyRule]
        """
        ...
    
    @property
    def resource_rules(self): # -> None:
        """Gets the resource_rules of this V1beta2PolicyRulesWithSubjects.  # noqa: E501

        `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.  # noqa: E501

        :return: The resource_rules of this V1beta2PolicyRulesWithSubjects.  # noqa: E501
        :rtype: list[V1beta2ResourcePolicyRule]
        """
        ...
    
    @resource_rules.setter
    def resource_rules(self, resource_rules): # -> None:
        """Sets the resource_rules of this V1beta2PolicyRulesWithSubjects.

        `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.  # noqa: E501

        :param resource_rules: The resource_rules of this V1beta2PolicyRulesWithSubjects.  # noqa: E501
        :type: list[V1beta2ResourcePolicyRule]
        """
        ...
    
    @property
    def subjects(self): # -> None:
        """Gets the subjects of this V1beta2PolicyRulesWithSubjects.  # noqa: E501

        subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.  # noqa: E501

        :return: The subjects of this V1beta2PolicyRulesWithSubjects.  # noqa: E501
        :rtype: list[V1beta2Subject]
        """
        ...
    
    @subjects.setter
    def subjects(self, subjects): # -> None:
        """Sets the subjects of this V1beta2PolicyRulesWithSubjects.

        subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.  # noqa: E501

        :param subjects: The subjects of this V1beta2PolicyRulesWithSubjects.  # noqa: E501
        :type: list[V1beta2Subject]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


