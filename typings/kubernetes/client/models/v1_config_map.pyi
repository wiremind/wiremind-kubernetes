"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ConfigMap:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., binary_data=..., data=..., immutable=..., kind=..., metadata=..., local_vars_configuration=...) -> None:
        """V1ConfigMap - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1ConfigMap.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1ConfigMap.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1ConfigMap.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def binary_data(self): # -> None:
        """Gets the binary_data of this V1ConfigMap.  # noqa: E501

        BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.  # noqa: E501

        :return: The binary_data of this V1ConfigMap.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @binary_data.setter
    def binary_data(self, binary_data): # -> None:
        """Sets the binary_data of this V1ConfigMap.

        BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.  # noqa: E501

        :param binary_data: The binary_data of this V1ConfigMap.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def data(self): # -> None:
        """Gets the data of this V1ConfigMap.  # noqa: E501

        Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.  # noqa: E501

        :return: The data of this V1ConfigMap.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @data.setter
    def data(self, data): # -> None:
        """Sets the data of this V1ConfigMap.

        Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.  # noqa: E501

        :param data: The data of this V1ConfigMap.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def immutable(self): # -> None:
        """Gets the immutable of this V1ConfigMap.  # noqa: E501

        Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.  # noqa: E501

        :return: The immutable of this V1ConfigMap.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @immutable.setter
    def immutable(self, immutable): # -> None:
        """Sets the immutable of this V1ConfigMap.

        Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.  # noqa: E501

        :param immutable: The immutable of this V1ConfigMap.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1ConfigMap.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1ConfigMap.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1ConfigMap.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1ConfigMap.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def metadata(self): # -> None:
        """Gets the metadata of this V1ConfigMap.  # noqa: E501


        :return: The metadata of this V1ConfigMap.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        ...
    
    @metadata.setter
    def metadata(self, metadata): # -> None:
        """Sets the metadata of this V1ConfigMap.


        :param metadata: The metadata of this V1ConfigMap.  # noqa: E501
        :type: V1ObjectMeta
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


