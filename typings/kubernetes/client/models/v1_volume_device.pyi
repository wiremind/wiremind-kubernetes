"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1VolumeDevice:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, device_path=..., name=..., local_vars_configuration=...) -> None:
        """V1VolumeDevice - a model defined in OpenAPI"""
        ...
    
    @property
    def device_path(self): # -> None:
        """Gets the device_path of this V1VolumeDevice.  # noqa: E501

        devicePath is the path inside of the container that the device will be mapped to.  # noqa: E501

        :return: The device_path of this V1VolumeDevice.  # noqa: E501
        :rtype: str
        """
        ...
    
    @device_path.setter
    def device_path(self, device_path): # -> None:
        """Sets the device_path of this V1VolumeDevice.

        devicePath is the path inside of the container that the device will be mapped to.  # noqa: E501

        :param device_path: The device_path of this V1VolumeDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1VolumeDevice.  # noqa: E501

        name must match the name of a persistentVolumeClaim in the pod  # noqa: E501

        :return: The name of this V1VolumeDevice.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1VolumeDevice.

        name must match the name of a persistentVolumeClaim in the pod  # noqa: E501

        :param name: The name of this V1VolumeDevice.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


