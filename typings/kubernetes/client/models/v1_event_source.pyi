"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1EventSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, component=..., host=..., local_vars_configuration=...) -> None:
        """V1EventSource - a model defined in OpenAPI"""
        ...
    
    @property
    def component(self): # -> None:
        """Gets the component of this V1EventSource.  # noqa: E501

        Component from which the event is generated.  # noqa: E501

        :return: The component of this V1EventSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @component.setter
    def component(self, component): # -> None:
        """Sets the component of this V1EventSource.

        Component from which the event is generated.  # noqa: E501

        :param component: The component of this V1EventSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def host(self): # -> None:
        """Gets the host of this V1EventSource.  # noqa: E501

        Node name on which the event is generated.  # noqa: E501

        :return: The host of this V1EventSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @host.setter
    def host(self, host): # -> None:
        """Sets the host of this V1EventSource.

        Node name on which the event is generated.  # noqa: E501

        :param host: The host of this V1EventSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


