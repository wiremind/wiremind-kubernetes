"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V2beta1ExternalMetricSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, metric_name=..., metric_selector=..., target_average_value=..., target_value=..., local_vars_configuration=...) -> None:
        """V2beta1ExternalMetricSource - a model defined in OpenAPI"""
        ...
    
    @property
    def metric_name(self): # -> None:
        """Gets the metric_name of this V2beta1ExternalMetricSource.  # noqa: E501

        metricName is the name of the metric in question.  # noqa: E501

        :return: The metric_name of this V2beta1ExternalMetricSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @metric_name.setter
    def metric_name(self, metric_name): # -> None:
        """Sets the metric_name of this V2beta1ExternalMetricSource.

        metricName is the name of the metric in question.  # noqa: E501

        :param metric_name: The metric_name of this V2beta1ExternalMetricSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def metric_selector(self): # -> None:
        """Gets the metric_selector of this V2beta1ExternalMetricSource.  # noqa: E501


        :return: The metric_selector of this V2beta1ExternalMetricSource.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @metric_selector.setter
    def metric_selector(self, metric_selector): # -> None:
        """Sets the metric_selector of this V2beta1ExternalMetricSource.


        :param metric_selector: The metric_selector of this V2beta1ExternalMetricSource.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def target_average_value(self): # -> None:
        """Gets the target_average_value of this V2beta1ExternalMetricSource.  # noqa: E501

        targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.  # noqa: E501

        :return: The target_average_value of this V2beta1ExternalMetricSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @target_average_value.setter
    def target_average_value(self, target_average_value): # -> None:
        """Sets the target_average_value of this V2beta1ExternalMetricSource.

        targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.  # noqa: E501

        :param target_average_value: The target_average_value of this V2beta1ExternalMetricSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def target_value(self): # -> None:
        """Gets the target_value of this V2beta1ExternalMetricSource.  # noqa: E501

        targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.  # noqa: E501

        :return: The target_value of this V2beta1ExternalMetricSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @target_value.setter
    def target_value(self, target_value): # -> None:
        """Sets the target_value of this V2beta1ExternalMetricSource.

        targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.  # noqa: E501

        :param target_value: The target_value of this V2beta1ExternalMetricSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


