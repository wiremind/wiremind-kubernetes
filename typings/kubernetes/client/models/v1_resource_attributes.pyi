"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ResourceAttributes:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, group=..., name=..., namespace=..., resource=..., subresource=..., verb=..., version=..., local_vars_configuration=...) -> None:
        """V1ResourceAttributes - a model defined in OpenAPI"""
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this V1ResourceAttributes.  # noqa: E501

        Group is the API Group of the Resource.  \"*\" means all.  # noqa: E501

        :return: The group of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this V1ResourceAttributes.

        Group is the API Group of the Resource.  \"*\" means all.  # noqa: E501

        :param group: The group of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ResourceAttributes.  # noqa: E501

        Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.  # noqa: E501

        :return: The name of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ResourceAttributes.

        Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.  # noqa: E501

        :param name: The name of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def namespace(self): # -> None:
        """Gets the namespace of this V1ResourceAttributes.  # noqa: E501

        Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview  # noqa: E501

        :return: The namespace of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @namespace.setter
    def namespace(self, namespace): # -> None:
        """Sets the namespace of this V1ResourceAttributes.

        Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview  # noqa: E501

        :param namespace: The namespace of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def resource(self): # -> None:
        """Gets the resource of this V1ResourceAttributes.  # noqa: E501

        Resource is one of the existing resource types.  \"*\" means all.  # noqa: E501

        :return: The resource of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @resource.setter
    def resource(self, resource): # -> None:
        """Sets the resource of this V1ResourceAttributes.

        Resource is one of the existing resource types.  \"*\" means all.  # noqa: E501

        :param resource: The resource of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def subresource(self): # -> None:
        """Gets the subresource of this V1ResourceAttributes.  # noqa: E501

        Subresource is one of the existing resource types.  \"\" means none.  # noqa: E501

        :return: The subresource of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @subresource.setter
    def subresource(self, subresource): # -> None:
        """Sets the subresource of this V1ResourceAttributes.

        Subresource is one of the existing resource types.  \"\" means none.  # noqa: E501

        :param subresource: The subresource of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def verb(self): # -> None:
        """Gets the verb of this V1ResourceAttributes.  # noqa: E501

        Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.  # noqa: E501

        :return: The verb of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @verb.setter
    def verb(self, verb): # -> None:
        """Sets the verb of this V1ResourceAttributes.

        Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.  # noqa: E501

        :param verb: The verb of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def version(self): # -> None:
        """Gets the version of this V1ResourceAttributes.  # noqa: E501

        Version is the API Version of the Resource.  \"*\" means all.  # noqa: E501

        :return: The version of this V1ResourceAttributes.  # noqa: E501
        :rtype: str
        """
        ...
    
    @version.setter
    def version(self, version): # -> None:
        """Sets the version of this V1ResourceAttributes.

        Version is the API Version of the Resource.  \"*\" means all.  # noqa: E501

        :param version: The version of this V1ResourceAttributes.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


