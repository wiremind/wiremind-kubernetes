"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ManagedFieldsEntry:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, api_version=..., fields_type=..., fields_v1=..., manager=..., operation=..., subresource=..., time=..., local_vars_configuration=...) -> None:
        """V1ManagedFieldsEntry - a model defined in OpenAPI"""
        ...
    
    @property
    def api_version(self): # -> None:
        """Gets the api_version of this V1ManagedFieldsEntry.  # noqa: E501

        APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.  # noqa: E501

        :return: The api_version of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: str
        """
        ...
    
    @api_version.setter
    def api_version(self, api_version): # -> None:
        """Sets the api_version of this V1ManagedFieldsEntry.

        APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.  # noqa: E501

        :param api_version: The api_version of this V1ManagedFieldsEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def fields_type(self): # -> None:
        """Gets the fields_type of this V1ManagedFieldsEntry.  # noqa: E501

        FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"  # noqa: E501

        :return: The fields_type of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: str
        """
        ...
    
    @fields_type.setter
    def fields_type(self, fields_type): # -> None:
        """Sets the fields_type of this V1ManagedFieldsEntry.

        FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"  # noqa: E501

        :param fields_type: The fields_type of this V1ManagedFieldsEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def fields_v1(self): # -> None:
        """Gets the fields_v1 of this V1ManagedFieldsEntry.  # noqa: E501

        FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.  # noqa: E501

        :return: The fields_v1 of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: object
        """
        ...
    
    @fields_v1.setter
    def fields_v1(self, fields_v1): # -> None:
        """Sets the fields_v1 of this V1ManagedFieldsEntry.

        FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.  # noqa: E501

        :param fields_v1: The fields_v1 of this V1ManagedFieldsEntry.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def manager(self): # -> None:
        """Gets the manager of this V1ManagedFieldsEntry.  # noqa: E501

        Manager is an identifier of the workflow managing these fields.  # noqa: E501

        :return: The manager of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: str
        """
        ...
    
    @manager.setter
    def manager(self, manager): # -> None:
        """Sets the manager of this V1ManagedFieldsEntry.

        Manager is an identifier of the workflow managing these fields.  # noqa: E501

        :param manager: The manager of this V1ManagedFieldsEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def operation(self): # -> None:
        """Gets the operation of this V1ManagedFieldsEntry.  # noqa: E501

        Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.  # noqa: E501

        :return: The operation of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: str
        """
        ...
    
    @operation.setter
    def operation(self, operation): # -> None:
        """Sets the operation of this V1ManagedFieldsEntry.

        Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.  # noqa: E501

        :param operation: The operation of this V1ManagedFieldsEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def subresource(self): # -> None:
        """Gets the subresource of this V1ManagedFieldsEntry.  # noqa: E501

        Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.  # noqa: E501

        :return: The subresource of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: str
        """
        ...
    
    @subresource.setter
    def subresource(self, subresource): # -> None:
        """Sets the subresource of this V1ManagedFieldsEntry.

        Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.  # noqa: E501

        :param subresource: The subresource of this V1ManagedFieldsEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def time(self): # -> None:
        """Gets the time of this V1ManagedFieldsEntry.  # noqa: E501

        Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.  # noqa: E501

        :return: The time of this V1ManagedFieldsEntry.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @time.setter
    def time(self, time): # -> None:
        """Sets the time of this V1ManagedFieldsEntry.

        Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.  # noqa: E501

        :param time: The time of this V1ManagedFieldsEntry.  # noqa: E501
        :type: datetime
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


