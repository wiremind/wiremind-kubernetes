"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1TokenRequestSpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, audiences=..., bound_object_ref=..., expiration_seconds=..., local_vars_configuration=...) -> None:
        """V1TokenRequestSpec - a model defined in OpenAPI"""
        ...
    
    @property
    def audiences(self): # -> None:
        """Gets the audiences of this V1TokenRequestSpec.  # noqa: E501

        Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.  # noqa: E501

        :return: The audiences of this V1TokenRequestSpec.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @audiences.setter
    def audiences(self, audiences): # -> None:
        """Sets the audiences of this V1TokenRequestSpec.

        Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.  # noqa: E501

        :param audiences: The audiences of this V1TokenRequestSpec.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def bound_object_ref(self): # -> None:
        """Gets the bound_object_ref of this V1TokenRequestSpec.  # noqa: E501


        :return: The bound_object_ref of this V1TokenRequestSpec.  # noqa: E501
        :rtype: V1BoundObjectReference
        """
        ...
    
    @bound_object_ref.setter
    def bound_object_ref(self, bound_object_ref): # -> None:
        """Sets the bound_object_ref of this V1TokenRequestSpec.


        :param bound_object_ref: The bound_object_ref of this V1TokenRequestSpec.  # noqa: E501
        :type: V1BoundObjectReference
        """
        ...
    
    @property
    def expiration_seconds(self): # -> None:
        """Gets the expiration_seconds of this V1TokenRequestSpec.  # noqa: E501

        ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.  # noqa: E501

        :return: The expiration_seconds of this V1TokenRequestSpec.  # noqa: E501
        :rtype: int
        """
        ...
    
    @expiration_seconds.setter
    def expiration_seconds(self, expiration_seconds): # -> None:
        """Sets the expiration_seconds of this V1TokenRequestSpec.

        ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.  # noqa: E501

        :param expiration_seconds: The expiration_seconds of this V1TokenRequestSpec.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


