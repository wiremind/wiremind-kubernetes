"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1LifecycleHandler:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, _exec=..., http_get=..., tcp_socket=..., local_vars_configuration=...) -> None:
        """V1LifecycleHandler - a model defined in OpenAPI"""
        ...
    
    @property
    def http_get(self): # -> None:
        """Gets the http_get of this V1LifecycleHandler.  # noqa: E501


        :return: The http_get of this V1LifecycleHandler.  # noqa: E501
        :rtype: V1HTTPGetAction
        """
        ...
    
    @http_get.setter
    def http_get(self, http_get): # -> None:
        """Sets the http_get of this V1LifecycleHandler.


        :param http_get: The http_get of this V1LifecycleHandler.  # noqa: E501
        :type: V1HTTPGetAction
        """
        ...
    
    @property
    def tcp_socket(self): # -> None:
        """Gets the tcp_socket of this V1LifecycleHandler.  # noqa: E501


        :return: The tcp_socket of this V1LifecycleHandler.  # noqa: E501
        :rtype: V1TCPSocketAction
        """
        ...
    
    @tcp_socket.setter
    def tcp_socket(self, tcp_socket): # -> None:
        """Sets the tcp_socket of this V1LifecycleHandler.


        :param tcp_socket: The tcp_socket of this V1LifecycleHandler.  # noqa: E501
        :type: V1TCPSocketAction
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


