"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta1LimitedPriorityLevelConfiguration:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, assured_concurrency_shares=..., limit_response=..., local_vars_configuration=...) -> None:
        """V1beta1LimitedPriorityLevelConfiguration - a model defined in OpenAPI"""
        ...
    
    @property
    def assured_concurrency_shares(self): # -> None:
        """Gets the assured_concurrency_shares of this V1beta1LimitedPriorityLevelConfiguration.  # noqa: E501

        `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.  # noqa: E501

        :return: The assured_concurrency_shares of this V1beta1LimitedPriorityLevelConfiguration.  # noqa: E501
        :rtype: int
        """
        ...
    
    @assured_concurrency_shares.setter
    def assured_concurrency_shares(self, assured_concurrency_shares): # -> None:
        """Sets the assured_concurrency_shares of this V1beta1LimitedPriorityLevelConfiguration.

        `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.  # noqa: E501

        :param assured_concurrency_shares: The assured_concurrency_shares of this V1beta1LimitedPriorityLevelConfiguration.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def limit_response(self): # -> None:
        """Gets the limit_response of this V1beta1LimitedPriorityLevelConfiguration.  # noqa: E501


        :return: The limit_response of this V1beta1LimitedPriorityLevelConfiguration.  # noqa: E501
        :rtype: V1beta1LimitResponse
        """
        ...
    
    @limit_response.setter
    def limit_response(self, limit_response): # -> None:
        """Sets the limit_response of this V1beta1LimitedPriorityLevelConfiguration.


        :param limit_response: The limit_response of this V1beta1LimitedPriorityLevelConfiguration.  # noqa: E501
        :type: V1beta1LimitResponse
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


