"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1StorageOSVolumeSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, fs_type=..., read_only=..., secret_ref=..., volume_name=..., volume_namespace=..., local_vars_configuration=...) -> None:
        """V1StorageOSVolumeSource - a model defined in OpenAPI"""
        ...
    
    @property
    def fs_type(self): # -> None:
        """Gets the fs_type of this V1StorageOSVolumeSource.  # noqa: E501

        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :return: The fs_type of this V1StorageOSVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @fs_type.setter
    def fs_type(self, fs_type): # -> None:
        """Sets the fs_type of this V1StorageOSVolumeSource.

        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :param fs_type: The fs_type of this V1StorageOSVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def read_only(self): # -> None:
        """Gets the read_only of this V1StorageOSVolumeSource.  # noqa: E501

        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this V1StorageOSVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @read_only.setter
    def read_only(self, read_only): # -> None:
        """Sets the read_only of this V1StorageOSVolumeSource.

        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this V1StorageOSVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def secret_ref(self): # -> None:
        """Gets the secret_ref of this V1StorageOSVolumeSource.  # noqa: E501


        :return: The secret_ref of this V1StorageOSVolumeSource.  # noqa: E501
        :rtype: V1LocalObjectReference
        """
        ...
    
    @secret_ref.setter
    def secret_ref(self, secret_ref): # -> None:
        """Sets the secret_ref of this V1StorageOSVolumeSource.


        :param secret_ref: The secret_ref of this V1StorageOSVolumeSource.  # noqa: E501
        :type: V1LocalObjectReference
        """
        ...
    
    @property
    def volume_name(self): # -> None:
        """Gets the volume_name of this V1StorageOSVolumeSource.  # noqa: E501

        volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.  # noqa: E501

        :return: The volume_name of this V1StorageOSVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @volume_name.setter
    def volume_name(self, volume_name): # -> None:
        """Sets the volume_name of this V1StorageOSVolumeSource.

        volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.  # noqa: E501

        :param volume_name: The volume_name of this V1StorageOSVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def volume_namespace(self): # -> None:
        """Gets the volume_namespace of this V1StorageOSVolumeSource.  # noqa: E501

        volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.  # noqa: E501

        :return: The volume_namespace of this V1StorageOSVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @volume_namespace.setter
    def volume_namespace(self, volume_namespace): # -> None:
        """Sets the volume_namespace of this V1StorageOSVolumeSource.

        volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.  # noqa: E501

        :param volume_namespace: The volume_namespace of this V1StorageOSVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


