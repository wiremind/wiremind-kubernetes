"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta1Endpoint:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, addresses=..., conditions=..., hints=..., hostname=..., node_name=..., target_ref=..., topology=..., local_vars_configuration=...) -> None:
        """V1beta1Endpoint - a model defined in OpenAPI"""
        ...
    
    @property
    def addresses(self): # -> None:
        """Gets the addresses of this V1beta1Endpoint.  # noqa: E501

        addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267  # noqa: E501

        :return: The addresses of this V1beta1Endpoint.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @addresses.setter
    def addresses(self, addresses): # -> None:
        """Sets the addresses of this V1beta1Endpoint.

        addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267  # noqa: E501

        :param addresses: The addresses of this V1beta1Endpoint.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1beta1Endpoint.  # noqa: E501


        :return: The conditions of this V1beta1Endpoint.  # noqa: E501
        :rtype: V1beta1EndpointConditions
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1beta1Endpoint.


        :param conditions: The conditions of this V1beta1Endpoint.  # noqa: E501
        :type: V1beta1EndpointConditions
        """
        ...
    
    @property
    def hints(self): # -> None:
        """Gets the hints of this V1beta1Endpoint.  # noqa: E501


        :return: The hints of this V1beta1Endpoint.  # noqa: E501
        :rtype: V1beta1EndpointHints
        """
        ...
    
    @hints.setter
    def hints(self, hints): # -> None:
        """Sets the hints of this V1beta1Endpoint.


        :param hints: The hints of this V1beta1Endpoint.  # noqa: E501
        :type: V1beta1EndpointHints
        """
        ...
    
    @property
    def hostname(self): # -> None:
        """Gets the hostname of this V1beta1Endpoint.  # noqa: E501

        hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.  # noqa: E501

        :return: The hostname of this V1beta1Endpoint.  # noqa: E501
        :rtype: str
        """
        ...
    
    @hostname.setter
    def hostname(self, hostname): # -> None:
        """Sets the hostname of this V1beta1Endpoint.

        hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.  # noqa: E501

        :param hostname: The hostname of this V1beta1Endpoint.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def node_name(self): # -> None:
        """Gets the node_name of this V1beta1Endpoint.  # noqa: E501

        nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node. This field can be enabled with the EndpointSliceNodeName feature gate.  # noqa: E501

        :return: The node_name of this V1beta1Endpoint.  # noqa: E501
        :rtype: str
        """
        ...
    
    @node_name.setter
    def node_name(self, node_name): # -> None:
        """Sets the node_name of this V1beta1Endpoint.

        nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node. This field can be enabled with the EndpointSliceNodeName feature gate.  # noqa: E501

        :param node_name: The node_name of this V1beta1Endpoint.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def target_ref(self): # -> None:
        """Gets the target_ref of this V1beta1Endpoint.  # noqa: E501


        :return: The target_ref of this V1beta1Endpoint.  # noqa: E501
        :rtype: V1ObjectReference
        """
        ...
    
    @target_ref.setter
    def target_ref(self, target_ref): # -> None:
        """Sets the target_ref of this V1beta1Endpoint.


        :param target_ref: The target_ref of this V1beta1Endpoint.  # noqa: E501
        :type: V1ObjectReference
        """
        ...
    
    @property
    def topology(self): # -> None:
        """Gets the topology of this V1beta1Endpoint.  # noqa: E501

        topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node   where the endpoint is located. This should match the corresponding   node label. * topology.kubernetes.io/zone: the value indicates the zone where the   endpoint is located. This should match the corresponding node label. * topology.kubernetes.io/region: the value indicates the region where the   endpoint is located. This should match the corresponding node label. This field is deprecated and will be removed in future api versions.  # noqa: E501

        :return: The topology of this V1beta1Endpoint.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @topology.setter
    def topology(self, topology): # -> None:
        """Sets the topology of this V1beta1Endpoint.

        topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node   where the endpoint is located. This should match the corresponding   node label. * topology.kubernetes.io/zone: the value indicates the zone where the   endpoint is located. This should match the corresponding node label. * topology.kubernetes.io/region: the value indicates the region where the   endpoint is located. This should match the corresponding node label. This field is deprecated and will be removed in future api versions.  # noqa: E501

        :param topology: The topology of this V1beta1Endpoint.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


