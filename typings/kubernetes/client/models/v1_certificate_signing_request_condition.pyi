"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1CertificateSigningRequestCondition:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, last_transition_time=..., last_update_time=..., message=..., reason=..., status=..., type=..., local_vars_configuration=...) -> None:
        """V1CertificateSigningRequestCondition - a model defined in OpenAPI"""
        ...
    
    @property
    def last_transition_time(self): # -> None:
        """Gets the last_transition_time of this V1CertificateSigningRequestCondition.  # noqa: E501

        lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.  # noqa: E501

        :return: The last_transition_time of this V1CertificateSigningRequestCondition.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @last_transition_time.setter
    def last_transition_time(self, last_transition_time): # -> None:
        """Sets the last_transition_time of this V1CertificateSigningRequestCondition.

        lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.  # noqa: E501

        :param last_transition_time: The last_transition_time of this V1CertificateSigningRequestCondition.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def last_update_time(self): # -> None:
        """Gets the last_update_time of this V1CertificateSigningRequestCondition.  # noqa: E501

        lastUpdateTime is the time of the last update to this condition  # noqa: E501

        :return: The last_update_time of this V1CertificateSigningRequestCondition.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @last_update_time.setter
    def last_update_time(self, last_update_time): # -> None:
        """Sets the last_update_time of this V1CertificateSigningRequestCondition.

        lastUpdateTime is the time of the last update to this condition  # noqa: E501

        :param last_update_time: The last_update_time of this V1CertificateSigningRequestCondition.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def message(self): # -> None:
        """Gets the message of this V1CertificateSigningRequestCondition.  # noqa: E501

        message contains a human readable message with details about the request state  # noqa: E501

        :return: The message of this V1CertificateSigningRequestCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @message.setter
    def message(self, message): # -> None:
        """Sets the message of this V1CertificateSigningRequestCondition.

        message contains a human readable message with details about the request state  # noqa: E501

        :param message: The message of this V1CertificateSigningRequestCondition.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def reason(self): # -> None:
        """Gets the reason of this V1CertificateSigningRequestCondition.  # noqa: E501

        reason indicates a brief reason for the request state  # noqa: E501

        :return: The reason of this V1CertificateSigningRequestCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @reason.setter
    def reason(self, reason): # -> None:
        """Sets the reason of this V1CertificateSigningRequestCondition.

        reason indicates a brief reason for the request state  # noqa: E501

        :param reason: The reason of this V1CertificateSigningRequestCondition.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def status(self): # -> None:
        """Gets the status of this V1CertificateSigningRequestCondition.  # noqa: E501

        status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".  # noqa: E501

        :return: The status of this V1CertificateSigningRequestCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @status.setter
    def status(self, status): # -> None:
        """Sets the status of this V1CertificateSigningRequestCondition.

        status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".  # noqa: E501

        :param status: The status of this V1CertificateSigningRequestCondition.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this V1CertificateSigningRequestCondition.  # noqa: E501

        type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".  An \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.  A \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.  A \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.  Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.  Only one condition of a given type is allowed.  # noqa: E501

        :return: The type of this V1CertificateSigningRequestCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this V1CertificateSigningRequestCondition.

        type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".  An \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.  A \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.  A \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.  Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.  Only one condition of a given type is allowed.  # noqa: E501

        :param type: The type of this V1CertificateSigningRequestCondition.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


