"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ServicePort:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, app_protocol=..., name=..., node_port=..., port=..., protocol=..., target_port=..., local_vars_configuration=...) -> None:
        """V1ServicePort - a model defined in OpenAPI"""
        ...
    
    @property
    def app_protocol(self): # -> None:
        """Gets the app_protocol of this V1ServicePort.  # noqa: E501

        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.  # noqa: E501

        :return: The app_protocol of this V1ServicePort.  # noqa: E501
        :rtype: str
        """
        ...
    
    @app_protocol.setter
    def app_protocol(self, app_protocol): # -> None:
        """Sets the app_protocol of this V1ServicePort.

        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.  # noqa: E501

        :param app_protocol: The app_protocol of this V1ServicePort.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ServicePort.  # noqa: E501

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.  # noqa: E501

        :return: The name of this V1ServicePort.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ServicePort.

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.  # noqa: E501

        :param name: The name of this V1ServicePort.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def node_port(self): # -> None:
        """Gets the node_port of this V1ServicePort.  # noqa: E501

        The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport  # noqa: E501

        :return: The node_port of this V1ServicePort.  # noqa: E501
        :rtype: int
        """
        ...
    
    @node_port.setter
    def node_port(self, node_port): # -> None:
        """Sets the node_port of this V1ServicePort.

        The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport  # noqa: E501

        :param node_port: The node_port of this V1ServicePort.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def port(self): # -> None:
        """Gets the port of this V1ServicePort.  # noqa: E501

        The port that will be exposed by this service.  # noqa: E501

        :return: The port of this V1ServicePort.  # noqa: E501
        :rtype: int
        """
        ...
    
    @port.setter
    def port(self, port): # -> None:
        """Sets the port of this V1ServicePort.

        The port that will be exposed by this service.  # noqa: E501

        :param port: The port of this V1ServicePort.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def protocol(self): # -> None:
        """Gets the protocol of this V1ServicePort.  # noqa: E501

        The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.    # noqa: E501

        :return: The protocol of this V1ServicePort.  # noqa: E501
        :rtype: str
        """
        ...
    
    @protocol.setter
    def protocol(self, protocol): # -> None:
        """Sets the protocol of this V1ServicePort.

        The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.    # noqa: E501

        :param protocol: The protocol of this V1ServicePort.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def target_port(self): # -> None:
        """Gets the target_port of this V1ServicePort.  # noqa: E501

        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service  # noqa: E501

        :return: The target_port of this V1ServicePort.  # noqa: E501
        :rtype: object
        """
        ...
    
    @target_port.setter
    def target_port(self, target_port): # -> None:
        """Sets the target_port of this V1ServicePort.

        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service  # noqa: E501

        :param target_port: The target_port of this V1ServicePort.  # noqa: E501
        :type: object
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


