"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1StatusDetails:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, causes=..., group=..., kind=..., name=..., retry_after_seconds=..., uid=..., local_vars_configuration=...) -> None:
        """V1StatusDetails - a model defined in OpenAPI"""
        ...
    
    @property
    def causes(self): # -> None:
        """Gets the causes of this V1StatusDetails.  # noqa: E501

        The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.  # noqa: E501

        :return: The causes of this V1StatusDetails.  # noqa: E501
        :rtype: list[V1StatusCause]
        """
        ...
    
    @causes.setter
    def causes(self, causes): # -> None:
        """Sets the causes of this V1StatusDetails.

        The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.  # noqa: E501

        :param causes: The causes of this V1StatusDetails.  # noqa: E501
        :type: list[V1StatusCause]
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this V1StatusDetails.  # noqa: E501

        The group attribute of the resource associated with the status StatusReason.  # noqa: E501

        :return: The group of this V1StatusDetails.  # noqa: E501
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this V1StatusDetails.

        The group attribute of the resource associated with the status StatusReason.  # noqa: E501

        :param group: The group of this V1StatusDetails.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def kind(self): # -> None:
        """Gets the kind of this V1StatusDetails.  # noqa: E501

        The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1StatusDetails.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kind.setter
    def kind(self, kind): # -> None:
        """Sets the kind of this V1StatusDetails.

        The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1StatusDetails.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1StatusDetails.  # noqa: E501

        The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).  # noqa: E501

        :return: The name of this V1StatusDetails.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1StatusDetails.

        The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).  # noqa: E501

        :param name: The name of this V1StatusDetails.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def retry_after_seconds(self): # -> None:
        """Gets the retry_after_seconds of this V1StatusDetails.  # noqa: E501

        If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.  # noqa: E501

        :return: The retry_after_seconds of this V1StatusDetails.  # noqa: E501
        :rtype: int
        """
        ...
    
    @retry_after_seconds.setter
    def retry_after_seconds(self, retry_after_seconds): # -> None:
        """Sets the retry_after_seconds of this V1StatusDetails.

        If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.  # noqa: E501

        :param retry_after_seconds: The retry_after_seconds of this V1StatusDetails.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def uid(self): # -> None:
        """Gets the uid of this V1StatusDetails.  # noqa: E501

        UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :return: The uid of this V1StatusDetails.  # noqa: E501
        :rtype: str
        """
        ...
    
    @uid.setter
    def uid(self, uid): # -> None:
        """Sets the uid of this V1StatusDetails.

        UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :param uid: The uid of this V1StatusDetails.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


