"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1HostAlias:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, hostnames=..., ip=..., local_vars_configuration=...) -> None:
        """V1HostAlias - a model defined in OpenAPI"""
        ...
    
    @property
    def hostnames(self): # -> None:
        """Gets the hostnames of this V1HostAlias.  # noqa: E501

        Hostnames for the above IP address.  # noqa: E501

        :return: The hostnames of this V1HostAlias.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @hostnames.setter
    def hostnames(self, hostnames): # -> None:
        """Sets the hostnames of this V1HostAlias.

        Hostnames for the above IP address.  # noqa: E501

        :param hostnames: The hostnames of this V1HostAlias.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def ip(self): # -> None:
        """Gets the ip of this V1HostAlias.  # noqa: E501

        IP address of the host file entry.  # noqa: E501

        :return: The ip of this V1HostAlias.  # noqa: E501
        :rtype: str
        """
        ...
    
    @ip.setter
    def ip(self, ip): # -> None:
        """Sets the ip of this V1HostAlias.

        IP address of the host file entry.  # noqa: E501

        :param ip: The ip of this V1HostAlias.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


