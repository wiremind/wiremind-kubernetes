"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1CustomResourceDefinitionStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, accepted_names=..., conditions=..., stored_versions=..., local_vars_configuration=...) -> None:
        """V1CustomResourceDefinitionStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def accepted_names(self): # -> None:
        """Gets the accepted_names of this V1CustomResourceDefinitionStatus.  # noqa: E501


        :return: The accepted_names of this V1CustomResourceDefinitionStatus.  # noqa: E501
        :rtype: V1CustomResourceDefinitionNames
        """
        ...
    
    @accepted_names.setter
    def accepted_names(self, accepted_names): # -> None:
        """Sets the accepted_names of this V1CustomResourceDefinitionStatus.


        :param accepted_names: The accepted_names of this V1CustomResourceDefinitionStatus.  # noqa: E501
        :type: V1CustomResourceDefinitionNames
        """
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1CustomResourceDefinitionStatus.  # noqa: E501

        conditions indicate state for particular aspects of a CustomResourceDefinition  # noqa: E501

        :return: The conditions of this V1CustomResourceDefinitionStatus.  # noqa: E501
        :rtype: list[V1CustomResourceDefinitionCondition]
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1CustomResourceDefinitionStatus.

        conditions indicate state for particular aspects of a CustomResourceDefinition  # noqa: E501

        :param conditions: The conditions of this V1CustomResourceDefinitionStatus.  # noqa: E501
        :type: list[V1CustomResourceDefinitionCondition]
        """
        ...
    
    @property
    def stored_versions(self): # -> None:
        """Gets the stored_versions of this V1CustomResourceDefinitionStatus.  # noqa: E501

        storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.  # noqa: E501

        :return: The stored_versions of this V1CustomResourceDefinitionStatus.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @stored_versions.setter
    def stored_versions(self, stored_versions): # -> None:
        """Sets the stored_versions of this V1CustomResourceDefinitionStatus.

        storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.  # noqa: E501

        :param stored_versions: The stored_versions of this V1CustomResourceDefinitionStatus.  # noqa: E501
        :type: list[str]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


