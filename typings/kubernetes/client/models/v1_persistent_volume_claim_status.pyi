"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1PersistentVolumeClaimStatus:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, access_modes=..., allocated_resources=..., capacity=..., conditions=..., phase=..., resize_status=..., local_vars_configuration=...) -> None:
        """V1PersistentVolumeClaimStatus - a model defined in OpenAPI"""
        ...
    
    @property
    def access_modes(self): # -> None:
        """Gets the access_modes of this V1PersistentVolumeClaimStatus.  # noqa: E501

        accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :return: The access_modes of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @access_modes.setter
    def access_modes(self, access_modes): # -> None:
        """Sets the access_modes of this V1PersistentVolumeClaimStatus.

        accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :param access_modes: The access_modes of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def allocated_resources(self): # -> None:
        """Gets the allocated_resources of this V1PersistentVolumeClaimStatus.  # noqa: E501

        allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.  # noqa: E501

        :return: The allocated_resources of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @allocated_resources.setter
    def allocated_resources(self, allocated_resources): # -> None:
        """Sets the allocated_resources of this V1PersistentVolumeClaimStatus.

        allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.  # noqa: E501

        :param allocated_resources: The allocated_resources of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def capacity(self): # -> None:
        """Gets the capacity of this V1PersistentVolumeClaimStatus.  # noqa: E501

        capacity represents the actual resources of the underlying volume.  # noqa: E501

        :return: The capacity of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        ...
    
    @capacity.setter
    def capacity(self, capacity): # -> None:
        """Sets the capacity of this V1PersistentVolumeClaimStatus.

        capacity represents the actual resources of the underlying volume.  # noqa: E501

        :param capacity: The capacity of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def conditions(self): # -> None:
        """Gets the conditions of this V1PersistentVolumeClaimStatus.  # noqa: E501

        conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.  # noqa: E501

        :return: The conditions of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: list[V1PersistentVolumeClaimCondition]
        """
        ...
    
    @conditions.setter
    def conditions(self, conditions): # -> None:
        """Sets the conditions of this V1PersistentVolumeClaimStatus.

        conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.  # noqa: E501

        :param conditions: The conditions of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :type: list[V1PersistentVolumeClaimCondition]
        """
        ...
    
    @property
    def phase(self): # -> None:
        """Gets the phase of this V1PersistentVolumeClaimStatus.  # noqa: E501

        phase represents the current phase of PersistentVolumeClaim.    # noqa: E501

        :return: The phase of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @phase.setter
    def phase(self, phase): # -> None:
        """Sets the phase of this V1PersistentVolumeClaimStatus.

        phase represents the current phase of PersistentVolumeClaim.    # noqa: E501

        :param phase: The phase of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def resize_status(self): # -> None:
        """Gets the resize_status of this V1PersistentVolumeClaimStatus.  # noqa: E501

        resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.  # noqa: E501

        :return: The resize_status of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: str
        """
        ...
    
    @resize_status.setter
    def resize_status(self, resize_status): # -> None:
        """Sets the resize_status of this V1PersistentVolumeClaimStatus.

        resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.  # noqa: E501

        :param resize_status: The resize_status of this V1PersistentVolumeClaimStatus.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


