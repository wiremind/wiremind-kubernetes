"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1PodAffinityTerm:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, label_selector=..., namespace_selector=..., namespaces=..., topology_key=..., local_vars_configuration=...) -> None:
        """V1PodAffinityTerm - a model defined in OpenAPI"""
        ...
    
    @property
    def label_selector(self): # -> None:
        """Gets the label_selector of this V1PodAffinityTerm.  # noqa: E501


        :return: The label_selector of this V1PodAffinityTerm.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @label_selector.setter
    def label_selector(self, label_selector): # -> None:
        """Sets the label_selector of this V1PodAffinityTerm.


        :param label_selector: The label_selector of this V1PodAffinityTerm.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def namespace_selector(self): # -> None:
        """Gets the namespace_selector of this V1PodAffinityTerm.  # noqa: E501


        :return: The namespace_selector of this V1PodAffinityTerm.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @namespace_selector.setter
    def namespace_selector(self, namespace_selector): # -> None:
        """Sets the namespace_selector of this V1PodAffinityTerm.


        :param namespace_selector: The namespace_selector of this V1PodAffinityTerm.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def namespaces(self): # -> None:
        """Gets the namespaces of this V1PodAffinityTerm.  # noqa: E501

        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".  # noqa: E501

        :return: The namespaces of this V1PodAffinityTerm.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @namespaces.setter
    def namespaces(self, namespaces): # -> None:
        """Sets the namespaces of this V1PodAffinityTerm.

        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".  # noqa: E501

        :param namespaces: The namespaces of this V1PodAffinityTerm.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def topology_key(self): # -> None:
        """Gets the topology_key of this V1PodAffinityTerm.  # noqa: E501

        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.  # noqa: E501

        :return: The topology_key of this V1PodAffinityTerm.  # noqa: E501
        :rtype: str
        """
        ...
    
    @topology_key.setter
    def topology_key(self, topology_key): # -> None:
        """Sets the topology_key of this V1PodAffinityTerm.

        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.  # noqa: E501

        :param topology_key: The topology_key of this V1PodAffinityTerm.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


