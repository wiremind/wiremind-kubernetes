"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1NetworkPolicySpec:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, egress=..., ingress=..., pod_selector=..., policy_types=..., local_vars_configuration=...) -> None:
        """V1NetworkPolicySpec - a model defined in OpenAPI"""
        ...
    
    @property
    def egress(self): # -> None:
        """Gets the egress of this V1NetworkPolicySpec.  # noqa: E501

        List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8  # noqa: E501

        :return: The egress of this V1NetworkPolicySpec.  # noqa: E501
        :rtype: list[V1NetworkPolicyEgressRule]
        """
        ...
    
    @egress.setter
    def egress(self, egress): # -> None:
        """Sets the egress of this V1NetworkPolicySpec.

        List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8  # noqa: E501

        :param egress: The egress of this V1NetworkPolicySpec.  # noqa: E501
        :type: list[V1NetworkPolicyEgressRule]
        """
        ...
    
    @property
    def ingress(self): # -> None:
        """Gets the ingress of this V1NetworkPolicySpec.  # noqa: E501

        List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)  # noqa: E501

        :return: The ingress of this V1NetworkPolicySpec.  # noqa: E501
        :rtype: list[V1NetworkPolicyIngressRule]
        """
        ...
    
    @ingress.setter
    def ingress(self, ingress): # -> None:
        """Sets the ingress of this V1NetworkPolicySpec.

        List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)  # noqa: E501

        :param ingress: The ingress of this V1NetworkPolicySpec.  # noqa: E501
        :type: list[V1NetworkPolicyIngressRule]
        """
        ...
    
    @property
    def pod_selector(self): # -> None:
        """Gets the pod_selector of this V1NetworkPolicySpec.  # noqa: E501


        :return: The pod_selector of this V1NetworkPolicySpec.  # noqa: E501
        :rtype: V1LabelSelector
        """
        ...
    
    @pod_selector.setter
    def pod_selector(self, pod_selector): # -> None:
        """Sets the pod_selector of this V1NetworkPolicySpec.


        :param pod_selector: The pod_selector of this V1NetworkPolicySpec.  # noqa: E501
        :type: V1LabelSelector
        """
        ...
    
    @property
    def policy_types(self): # -> None:
        """Gets the policy_types of this V1NetworkPolicySpec.  # noqa: E501

        List of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8  # noqa: E501

        :return: The policy_types of this V1NetworkPolicySpec.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @policy_types.setter
    def policy_types(self, policy_types): # -> None:
        """Sets the policy_types of this V1NetworkPolicySpec.

        List of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8  # noqa: E501

        :param policy_types: The policy_types of this V1NetworkPolicySpec.  # noqa: E501
        :type: list[str]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


