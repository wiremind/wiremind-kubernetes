"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ComponentCondition:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, error=..., message=..., status=..., type=..., local_vars_configuration=...) -> None:
        """V1ComponentCondition - a model defined in OpenAPI"""
        ...
    
    @property
    def error(self): # -> None:
        """Gets the error of this V1ComponentCondition.  # noqa: E501

        Condition error code for a component. For example, a health check error code.  # noqa: E501

        :return: The error of this V1ComponentCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @error.setter
    def error(self, error): # -> None:
        """Sets the error of this V1ComponentCondition.

        Condition error code for a component. For example, a health check error code.  # noqa: E501

        :param error: The error of this V1ComponentCondition.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def message(self): # -> None:
        """Gets the message of this V1ComponentCondition.  # noqa: E501

        Message about the condition for a component. For example, information about a health check.  # noqa: E501

        :return: The message of this V1ComponentCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @message.setter
    def message(self, message): # -> None:
        """Sets the message of this V1ComponentCondition.

        Message about the condition for a component. For example, information about a health check.  # noqa: E501

        :param message: The message of this V1ComponentCondition.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def status(self): # -> None:
        """Gets the status of this V1ComponentCondition.  # noqa: E501

        Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".  # noqa: E501

        :return: The status of this V1ComponentCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @status.setter
    def status(self, status): # -> None:
        """Sets the status of this V1ComponentCondition.

        Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".  # noqa: E501

        :param status: The status of this V1ComponentCondition.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this V1ComponentCondition.  # noqa: E501

        Type of condition for a component. Valid value: \"Healthy\"  # noqa: E501

        :return: The type of this V1ComponentCondition.  # noqa: E501
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this V1ComponentCondition.

        Type of condition for a component. Valid value: \"Healthy\"  # noqa: E501

        :param type: The type of this V1ComponentCondition.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


