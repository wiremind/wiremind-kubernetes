"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1HTTPGetAction:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, host=..., http_headers=..., path=..., port=..., scheme=..., local_vars_configuration=...) -> None:
        """V1HTTPGetAction - a model defined in OpenAPI"""
        ...
    
    @property
    def host(self): # -> None:
        """Gets the host of this V1HTTPGetAction.  # noqa: E501

        Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.  # noqa: E501

        :return: The host of this V1HTTPGetAction.  # noqa: E501
        :rtype: str
        """
        ...
    
    @host.setter
    def host(self, host): # -> None:
        """Sets the host of this V1HTTPGetAction.

        Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.  # noqa: E501

        :param host: The host of this V1HTTPGetAction.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def http_headers(self): # -> None:
        """Gets the http_headers of this V1HTTPGetAction.  # noqa: E501

        Custom headers to set in the request. HTTP allows repeated headers.  # noqa: E501

        :return: The http_headers of this V1HTTPGetAction.  # noqa: E501
        :rtype: list[V1HTTPHeader]
        """
        ...
    
    @http_headers.setter
    def http_headers(self, http_headers): # -> None:
        """Sets the http_headers of this V1HTTPGetAction.

        Custom headers to set in the request. HTTP allows repeated headers.  # noqa: E501

        :param http_headers: The http_headers of this V1HTTPGetAction.  # noqa: E501
        :type: list[V1HTTPHeader]
        """
        ...
    
    @property
    def path(self): # -> None:
        """Gets the path of this V1HTTPGetAction.  # noqa: E501

        Path to access on the HTTP server.  # noqa: E501

        :return: The path of this V1HTTPGetAction.  # noqa: E501
        :rtype: str
        """
        ...
    
    @path.setter
    def path(self, path): # -> None:
        """Sets the path of this V1HTTPGetAction.

        Path to access on the HTTP server.  # noqa: E501

        :param path: The path of this V1HTTPGetAction.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def port(self): # -> None:
        """Gets the port of this V1HTTPGetAction.  # noqa: E501

        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.  # noqa: E501

        :return: The port of this V1HTTPGetAction.  # noqa: E501
        :rtype: object
        """
        ...
    
    @port.setter
    def port(self, port): # -> None:
        """Sets the port of this V1HTTPGetAction.

        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.  # noqa: E501

        :param port: The port of this V1HTTPGetAction.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def scheme(self): # -> None:
        """Gets the scheme of this V1HTTPGetAction.  # noqa: E501

        Scheme to use for connecting to the host. Defaults to HTTP.    # noqa: E501

        :return: The scheme of this V1HTTPGetAction.  # noqa: E501
        :rtype: str
        """
        ...
    
    @scheme.setter
    def scheme(self, scheme): # -> None:
        """Sets the scheme of this V1HTTPGetAction.

        Scheme to use for connecting to the host. Defaults to HTTP.    # noqa: E501

        :param scheme: The scheme of this V1HTTPGetAction.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


