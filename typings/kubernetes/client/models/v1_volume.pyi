"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1Volume:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, aws_elastic_block_store=..., azure_disk=..., azure_file=..., cephfs=..., cinder=..., config_map=..., csi=..., downward_api=..., empty_dir=..., ephemeral=..., fc=..., flex_volume=..., flocker=..., gce_persistent_disk=..., git_repo=..., glusterfs=..., host_path=..., iscsi=..., name=..., nfs=..., persistent_volume_claim=..., photon_persistent_disk=..., portworx_volume=..., projected=..., quobyte=..., rbd=..., scale_io=..., secret=..., storageos=..., vsphere_volume=..., local_vars_configuration=...) -> None:
        """V1Volume - a model defined in OpenAPI"""
        ...
    
    @property
    def aws_elastic_block_store(self): # -> None:
        """Gets the aws_elastic_block_store of this V1Volume.  # noqa: E501


        :return: The aws_elastic_block_store of this V1Volume.  # noqa: E501
        :rtype: V1AWSElasticBlockStoreVolumeSource
        """
        ...
    
    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, aws_elastic_block_store): # -> None:
        """Sets the aws_elastic_block_store of this V1Volume.


        :param aws_elastic_block_store: The aws_elastic_block_store of this V1Volume.  # noqa: E501
        :type: V1AWSElasticBlockStoreVolumeSource
        """
        ...
    
    @property
    def azure_disk(self): # -> None:
        """Gets the azure_disk of this V1Volume.  # noqa: E501


        :return: The azure_disk of this V1Volume.  # noqa: E501
        :rtype: V1AzureDiskVolumeSource
        """
        ...
    
    @azure_disk.setter
    def azure_disk(self, azure_disk): # -> None:
        """Sets the azure_disk of this V1Volume.


        :param azure_disk: The azure_disk of this V1Volume.  # noqa: E501
        :type: V1AzureDiskVolumeSource
        """
        ...
    
    @property
    def azure_file(self): # -> None:
        """Gets the azure_file of this V1Volume.  # noqa: E501


        :return: The azure_file of this V1Volume.  # noqa: E501
        :rtype: V1AzureFileVolumeSource
        """
        ...
    
    @azure_file.setter
    def azure_file(self, azure_file): # -> None:
        """Sets the azure_file of this V1Volume.


        :param azure_file: The azure_file of this V1Volume.  # noqa: E501
        :type: V1AzureFileVolumeSource
        """
        ...
    
    @property
    def cephfs(self): # -> None:
        """Gets the cephfs of this V1Volume.  # noqa: E501


        :return: The cephfs of this V1Volume.  # noqa: E501
        :rtype: V1CephFSVolumeSource
        """
        ...
    
    @cephfs.setter
    def cephfs(self, cephfs): # -> None:
        """Sets the cephfs of this V1Volume.


        :param cephfs: The cephfs of this V1Volume.  # noqa: E501
        :type: V1CephFSVolumeSource
        """
        ...
    
    @property
    def cinder(self): # -> None:
        """Gets the cinder of this V1Volume.  # noqa: E501


        :return: The cinder of this V1Volume.  # noqa: E501
        :rtype: V1CinderVolumeSource
        """
        ...
    
    @cinder.setter
    def cinder(self, cinder): # -> None:
        """Sets the cinder of this V1Volume.


        :param cinder: The cinder of this V1Volume.  # noqa: E501
        :type: V1CinderVolumeSource
        """
        ...
    
    @property
    def config_map(self): # -> None:
        """Gets the config_map of this V1Volume.  # noqa: E501


        :return: The config_map of this V1Volume.  # noqa: E501
        :rtype: V1ConfigMapVolumeSource
        """
        ...
    
    @config_map.setter
    def config_map(self, config_map): # -> None:
        """Sets the config_map of this V1Volume.


        :param config_map: The config_map of this V1Volume.  # noqa: E501
        :type: V1ConfigMapVolumeSource
        """
        ...
    
    @property
    def csi(self): # -> None:
        """Gets the csi of this V1Volume.  # noqa: E501


        :return: The csi of this V1Volume.  # noqa: E501
        :rtype: V1CSIVolumeSource
        """
        ...
    
    @csi.setter
    def csi(self, csi): # -> None:
        """Sets the csi of this V1Volume.


        :param csi: The csi of this V1Volume.  # noqa: E501
        :type: V1CSIVolumeSource
        """
        ...
    
    @property
    def downward_api(self): # -> None:
        """Gets the downward_api of this V1Volume.  # noqa: E501


        :return: The downward_api of this V1Volume.  # noqa: E501
        :rtype: V1DownwardAPIVolumeSource
        """
        ...
    
    @downward_api.setter
    def downward_api(self, downward_api): # -> None:
        """Sets the downward_api of this V1Volume.


        :param downward_api: The downward_api of this V1Volume.  # noqa: E501
        :type: V1DownwardAPIVolumeSource
        """
        ...
    
    @property
    def empty_dir(self): # -> None:
        """Gets the empty_dir of this V1Volume.  # noqa: E501


        :return: The empty_dir of this V1Volume.  # noqa: E501
        :rtype: V1EmptyDirVolumeSource
        """
        ...
    
    @empty_dir.setter
    def empty_dir(self, empty_dir): # -> None:
        """Sets the empty_dir of this V1Volume.


        :param empty_dir: The empty_dir of this V1Volume.  # noqa: E501
        :type: V1EmptyDirVolumeSource
        """
        ...
    
    @property
    def ephemeral(self): # -> None:
        """Gets the ephemeral of this V1Volume.  # noqa: E501


        :return: The ephemeral of this V1Volume.  # noqa: E501
        :rtype: V1EphemeralVolumeSource
        """
        ...
    
    @ephemeral.setter
    def ephemeral(self, ephemeral): # -> None:
        """Sets the ephemeral of this V1Volume.


        :param ephemeral: The ephemeral of this V1Volume.  # noqa: E501
        :type: V1EphemeralVolumeSource
        """
        ...
    
    @property
    def fc(self): # -> None:
        """Gets the fc of this V1Volume.  # noqa: E501


        :return: The fc of this V1Volume.  # noqa: E501
        :rtype: V1FCVolumeSource
        """
        ...
    
    @fc.setter
    def fc(self, fc): # -> None:
        """Sets the fc of this V1Volume.


        :param fc: The fc of this V1Volume.  # noqa: E501
        :type: V1FCVolumeSource
        """
        ...
    
    @property
    def flex_volume(self): # -> None:
        """Gets the flex_volume of this V1Volume.  # noqa: E501


        :return: The flex_volume of this V1Volume.  # noqa: E501
        :rtype: V1FlexVolumeSource
        """
        ...
    
    @flex_volume.setter
    def flex_volume(self, flex_volume): # -> None:
        """Sets the flex_volume of this V1Volume.


        :param flex_volume: The flex_volume of this V1Volume.  # noqa: E501
        :type: V1FlexVolumeSource
        """
        ...
    
    @property
    def flocker(self): # -> None:
        """Gets the flocker of this V1Volume.  # noqa: E501


        :return: The flocker of this V1Volume.  # noqa: E501
        :rtype: V1FlockerVolumeSource
        """
        ...
    
    @flocker.setter
    def flocker(self, flocker): # -> None:
        """Sets the flocker of this V1Volume.


        :param flocker: The flocker of this V1Volume.  # noqa: E501
        :type: V1FlockerVolumeSource
        """
        ...
    
    @property
    def gce_persistent_disk(self): # -> None:
        """Gets the gce_persistent_disk of this V1Volume.  # noqa: E501


        :return: The gce_persistent_disk of this V1Volume.  # noqa: E501
        :rtype: V1GCEPersistentDiskVolumeSource
        """
        ...
    
    @gce_persistent_disk.setter
    def gce_persistent_disk(self, gce_persistent_disk): # -> None:
        """Sets the gce_persistent_disk of this V1Volume.


        :param gce_persistent_disk: The gce_persistent_disk of this V1Volume.  # noqa: E501
        :type: V1GCEPersistentDiskVolumeSource
        """
        ...
    
    @property
    def git_repo(self): # -> None:
        """Gets the git_repo of this V1Volume.  # noqa: E501


        :return: The git_repo of this V1Volume.  # noqa: E501
        :rtype: V1GitRepoVolumeSource
        """
        ...
    
    @git_repo.setter
    def git_repo(self, git_repo): # -> None:
        """Sets the git_repo of this V1Volume.


        :param git_repo: The git_repo of this V1Volume.  # noqa: E501
        :type: V1GitRepoVolumeSource
        """
        ...
    
    @property
    def glusterfs(self): # -> None:
        """Gets the glusterfs of this V1Volume.  # noqa: E501


        :return: The glusterfs of this V1Volume.  # noqa: E501
        :rtype: V1GlusterfsVolumeSource
        """
        ...
    
    @glusterfs.setter
    def glusterfs(self, glusterfs): # -> None:
        """Sets the glusterfs of this V1Volume.


        :param glusterfs: The glusterfs of this V1Volume.  # noqa: E501
        :type: V1GlusterfsVolumeSource
        """
        ...
    
    @property
    def host_path(self): # -> None:
        """Gets the host_path of this V1Volume.  # noqa: E501


        :return: The host_path of this V1Volume.  # noqa: E501
        :rtype: V1HostPathVolumeSource
        """
        ...
    
    @host_path.setter
    def host_path(self, host_path): # -> None:
        """Sets the host_path of this V1Volume.


        :param host_path: The host_path of this V1Volume.  # noqa: E501
        :type: V1HostPathVolumeSource
        """
        ...
    
    @property
    def iscsi(self): # -> None:
        """Gets the iscsi of this V1Volume.  # noqa: E501


        :return: The iscsi of this V1Volume.  # noqa: E501
        :rtype: V1ISCSIVolumeSource
        """
        ...
    
    @iscsi.setter
    def iscsi(self, iscsi): # -> None:
        """Sets the iscsi of this V1Volume.


        :param iscsi: The iscsi of this V1Volume.  # noqa: E501
        :type: V1ISCSIVolumeSource
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1Volume.  # noqa: E501

        name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :return: The name of this V1Volume.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1Volume.

        name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :param name: The name of this V1Volume.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def nfs(self): # -> None:
        """Gets the nfs of this V1Volume.  # noqa: E501


        :return: The nfs of this V1Volume.  # noqa: E501
        :rtype: V1NFSVolumeSource
        """
        ...
    
    @nfs.setter
    def nfs(self, nfs): # -> None:
        """Sets the nfs of this V1Volume.


        :param nfs: The nfs of this V1Volume.  # noqa: E501
        :type: V1NFSVolumeSource
        """
        ...
    
    @property
    def persistent_volume_claim(self): # -> None:
        """Gets the persistent_volume_claim of this V1Volume.  # noqa: E501


        :return: The persistent_volume_claim of this V1Volume.  # noqa: E501
        :rtype: V1PersistentVolumeClaimVolumeSource
        """
        ...
    
    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim): # -> None:
        """Sets the persistent_volume_claim of this V1Volume.


        :param persistent_volume_claim: The persistent_volume_claim of this V1Volume.  # noqa: E501
        :type: V1PersistentVolumeClaimVolumeSource
        """
        ...
    
    @property
    def photon_persistent_disk(self): # -> None:
        """Gets the photon_persistent_disk of this V1Volume.  # noqa: E501


        :return: The photon_persistent_disk of this V1Volume.  # noqa: E501
        :rtype: V1PhotonPersistentDiskVolumeSource
        """
        ...
    
    @photon_persistent_disk.setter
    def photon_persistent_disk(self, photon_persistent_disk): # -> None:
        """Sets the photon_persistent_disk of this V1Volume.


        :param photon_persistent_disk: The photon_persistent_disk of this V1Volume.  # noqa: E501
        :type: V1PhotonPersistentDiskVolumeSource
        """
        ...
    
    @property
    def portworx_volume(self): # -> None:
        """Gets the portworx_volume of this V1Volume.  # noqa: E501


        :return: The portworx_volume of this V1Volume.  # noqa: E501
        :rtype: V1PortworxVolumeSource
        """
        ...
    
    @portworx_volume.setter
    def portworx_volume(self, portworx_volume): # -> None:
        """Sets the portworx_volume of this V1Volume.


        :param portworx_volume: The portworx_volume of this V1Volume.  # noqa: E501
        :type: V1PortworxVolumeSource
        """
        ...
    
    @property
    def projected(self): # -> None:
        """Gets the projected of this V1Volume.  # noqa: E501


        :return: The projected of this V1Volume.  # noqa: E501
        :rtype: V1ProjectedVolumeSource
        """
        ...
    
    @projected.setter
    def projected(self, projected): # -> None:
        """Sets the projected of this V1Volume.


        :param projected: The projected of this V1Volume.  # noqa: E501
        :type: V1ProjectedVolumeSource
        """
        ...
    
    @property
    def quobyte(self): # -> None:
        """Gets the quobyte of this V1Volume.  # noqa: E501


        :return: The quobyte of this V1Volume.  # noqa: E501
        :rtype: V1QuobyteVolumeSource
        """
        ...
    
    @quobyte.setter
    def quobyte(self, quobyte): # -> None:
        """Sets the quobyte of this V1Volume.


        :param quobyte: The quobyte of this V1Volume.  # noqa: E501
        :type: V1QuobyteVolumeSource
        """
        ...
    
    @property
    def rbd(self): # -> None:
        """Gets the rbd of this V1Volume.  # noqa: E501


        :return: The rbd of this V1Volume.  # noqa: E501
        :rtype: V1RBDVolumeSource
        """
        ...
    
    @rbd.setter
    def rbd(self, rbd): # -> None:
        """Sets the rbd of this V1Volume.


        :param rbd: The rbd of this V1Volume.  # noqa: E501
        :type: V1RBDVolumeSource
        """
        ...
    
    @property
    def scale_io(self): # -> None:
        """Gets the scale_io of this V1Volume.  # noqa: E501


        :return: The scale_io of this V1Volume.  # noqa: E501
        :rtype: V1ScaleIOVolumeSource
        """
        ...
    
    @scale_io.setter
    def scale_io(self, scale_io): # -> None:
        """Sets the scale_io of this V1Volume.


        :param scale_io: The scale_io of this V1Volume.  # noqa: E501
        :type: V1ScaleIOVolumeSource
        """
        ...
    
    @property
    def secret(self): # -> None:
        """Gets the secret of this V1Volume.  # noqa: E501


        :return: The secret of this V1Volume.  # noqa: E501
        :rtype: V1SecretVolumeSource
        """
        ...
    
    @secret.setter
    def secret(self, secret): # -> None:
        """Sets the secret of this V1Volume.


        :param secret: The secret of this V1Volume.  # noqa: E501
        :type: V1SecretVolumeSource
        """
        ...
    
    @property
    def storageos(self): # -> None:
        """Gets the storageos of this V1Volume.  # noqa: E501


        :return: The storageos of this V1Volume.  # noqa: E501
        :rtype: V1StorageOSVolumeSource
        """
        ...
    
    @storageos.setter
    def storageos(self, storageos): # -> None:
        """Sets the storageos of this V1Volume.


        :param storageos: The storageos of this V1Volume.  # noqa: E501
        :type: V1StorageOSVolumeSource
        """
        ...
    
    @property
    def vsphere_volume(self): # -> None:
        """Gets the vsphere_volume of this V1Volume.  # noqa: E501


        :return: The vsphere_volume of this V1Volume.  # noqa: E501
        :rtype: V1VsphereVirtualDiskVolumeSource
        """
        ...
    
    @vsphere_volume.setter
    def vsphere_volume(self, vsphere_volume): # -> None:
        """Sets the vsphere_volume of this V1Volume.


        :param vsphere_volume: The vsphere_volume of this V1Volume.  # noqa: E501
        :type: V1VsphereVirtualDiskVolumeSource
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


