"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ISCSIPersistentVolumeSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, chap_auth_discovery=..., chap_auth_session=..., fs_type=..., initiator_name=..., iqn=..., iscsi_interface=..., lun=..., portals=..., read_only=..., secret_ref=..., target_portal=..., local_vars_configuration=...) -> None:
        """V1ISCSIPersistentVolumeSource - a model defined in OpenAPI"""
        ...
    
    @property
    def chap_auth_discovery(self): # -> None:
        """Gets the chap_auth_discovery of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication  # noqa: E501

        :return: The chap_auth_discovery of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @chap_auth_discovery.setter
    def chap_auth_discovery(self, chap_auth_discovery): # -> None:
        """Sets the chap_auth_discovery of this V1ISCSIPersistentVolumeSource.

        chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication  # noqa: E501

        :param chap_auth_discovery: The chap_auth_discovery of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def chap_auth_session(self): # -> None:
        """Gets the chap_auth_session of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        chapAuthSession defines whether support iSCSI Session CHAP authentication  # noqa: E501

        :return: The chap_auth_session of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @chap_auth_session.setter
    def chap_auth_session(self, chap_auth_session): # -> None:
        """Sets the chap_auth_session of this V1ISCSIPersistentVolumeSource.

        chapAuthSession defines whether support iSCSI Session CHAP authentication  # noqa: E501

        :param chap_auth_session: The chap_auth_session of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def fs_type(self): # -> None:
        """Gets the fs_type of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi  # noqa: E501

        :return: The fs_type of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @fs_type.setter
    def fs_type(self, fs_type): # -> None:
        """Sets the fs_type of this V1ISCSIPersistentVolumeSource.

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi  # noqa: E501

        :param fs_type: The fs_type of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def initiator_name(self): # -> None:
        """Gets the initiator_name of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.  # noqa: E501

        :return: The initiator_name of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @initiator_name.setter
    def initiator_name(self, initiator_name): # -> None:
        """Sets the initiator_name of this V1ISCSIPersistentVolumeSource.

        initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.  # noqa: E501

        :param initiator_name: The initiator_name of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def iqn(self): # -> None:
        """Gets the iqn of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        iqn is Target iSCSI Qualified Name.  # noqa: E501

        :return: The iqn of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @iqn.setter
    def iqn(self, iqn): # -> None:
        """Sets the iqn of this V1ISCSIPersistentVolumeSource.

        iqn is Target iSCSI Qualified Name.  # noqa: E501

        :param iqn: The iqn of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def iscsi_interface(self): # -> None:
        """Gets the iscsi_interface of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).  # noqa: E501

        :return: The iscsi_interface of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @iscsi_interface.setter
    def iscsi_interface(self, iscsi_interface): # -> None:
        """Sets the iscsi_interface of this V1ISCSIPersistentVolumeSource.

        iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).  # noqa: E501

        :param iscsi_interface: The iscsi_interface of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def lun(self): # -> None:
        """Gets the lun of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        lun is iSCSI Target Lun number.  # noqa: E501

        :return: The lun of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: int
        """
        ...
    
    @lun.setter
    def lun(self, lun): # -> None:
        """Sets the lun of this V1ISCSIPersistentVolumeSource.

        lun is iSCSI Target Lun number.  # noqa: E501

        :param lun: The lun of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def portals(self): # -> None:
        """Gets the portals of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :return: The portals of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @portals.setter
    def portals(self, portals): # -> None:
        """Sets the portals of this V1ISCSIPersistentVolumeSource.

        portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :param portals: The portals of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def read_only(self): # -> None:
        """Gets the read_only of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.  # noqa: E501

        :return: The read_only of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @read_only.setter
    def read_only(self, read_only): # -> None:
        """Sets the read_only of this V1ISCSIPersistentVolumeSource.

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.  # noqa: E501

        :param read_only: The read_only of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def secret_ref(self): # -> None:
        """Gets the secret_ref of this V1ISCSIPersistentVolumeSource.  # noqa: E501


        :return: The secret_ref of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: V1SecretReference
        """
        ...
    
    @secret_ref.setter
    def secret_ref(self, secret_ref): # -> None:
        """Sets the secret_ref of this V1ISCSIPersistentVolumeSource.


        :param secret_ref: The secret_ref of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: V1SecretReference
        """
        ...
    
    @property
    def target_portal(self): # -> None:
        """Gets the target_portal of this V1ISCSIPersistentVolumeSource.  # noqa: E501

        targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :return: The target_portal of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @target_portal.setter
    def target_portal(self, target_portal): # -> None:
        """Sets the target_portal of this V1ISCSIPersistentVolumeSource.

        targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :param target_portal: The target_portal of this V1ISCSIPersistentVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


