"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1beta1SELinuxStrategyOptions:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, rule=..., se_linux_options=..., local_vars_configuration=...) -> None:
        """V1beta1SELinuxStrategyOptions - a model defined in OpenAPI"""
        ...
    
    @property
    def rule(self): # -> None:
        """Gets the rule of this V1beta1SELinuxStrategyOptions.  # noqa: E501

        rule is the strategy that will dictate the allowable labels that may be set.  # noqa: E501

        :return: The rule of this V1beta1SELinuxStrategyOptions.  # noqa: E501
        :rtype: str
        """
        ...
    
    @rule.setter
    def rule(self, rule): # -> None:
        """Sets the rule of this V1beta1SELinuxStrategyOptions.

        rule is the strategy that will dictate the allowable labels that may be set.  # noqa: E501

        :param rule: The rule of this V1beta1SELinuxStrategyOptions.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def se_linux_options(self): # -> None:
        """Gets the se_linux_options of this V1beta1SELinuxStrategyOptions.  # noqa: E501


        :return: The se_linux_options of this V1beta1SELinuxStrategyOptions.  # noqa: E501
        :rtype: V1SELinuxOptions
        """
        ...
    
    @se_linux_options.setter
    def se_linux_options(self, se_linux_options): # -> None:
        """Sets the se_linux_options of this V1beta1SELinuxStrategyOptions.


        :param se_linux_options: The se_linux_options of this V1beta1SELinuxStrategyOptions.  # noqa: E501
        :type: V1SELinuxOptions
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


