"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1WeightedPodAffinityTerm:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, pod_affinity_term=..., weight=..., local_vars_configuration=...) -> None:
        """V1WeightedPodAffinityTerm - a model defined in OpenAPI"""
        ...
    
    @property
    def pod_affinity_term(self): # -> None:
        """Gets the pod_affinity_term of this V1WeightedPodAffinityTerm.  # noqa: E501


        :return: The pod_affinity_term of this V1WeightedPodAffinityTerm.  # noqa: E501
        :rtype: V1PodAffinityTerm
        """
        ...
    
    @pod_affinity_term.setter
    def pod_affinity_term(self, pod_affinity_term): # -> None:
        """Sets the pod_affinity_term of this V1WeightedPodAffinityTerm.


        :param pod_affinity_term: The pod_affinity_term of this V1WeightedPodAffinityTerm.  # noqa: E501
        :type: V1PodAffinityTerm
        """
        ...
    
    @property
    def weight(self): # -> None:
        """Gets the weight of this V1WeightedPodAffinityTerm.  # noqa: E501

        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.  # noqa: E501

        :return: The weight of this V1WeightedPodAffinityTerm.  # noqa: E501
        :rtype: int
        """
        ...
    
    @weight.setter
    def weight(self, weight): # -> None:
        """Sets the weight of this V1WeightedPodAffinityTerm.

        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.  # noqa: E501

        :param weight: The weight of this V1WeightedPodAffinityTerm.  # noqa: E501
        :type: int
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


