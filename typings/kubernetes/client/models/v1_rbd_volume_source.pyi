"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1RBDVolumeSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, fs_type=..., image=..., keyring=..., monitors=..., pool=..., read_only=..., secret_ref=..., user=..., local_vars_configuration=...) -> None:
        """V1RBDVolumeSource - a model defined in OpenAPI"""
        ...
    
    @property
    def fs_type(self): # -> None:
        """Gets the fs_type of this V1RBDVolumeSource.  # noqa: E501

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd  # noqa: E501

        :return: The fs_type of this V1RBDVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @fs_type.setter
    def fs_type(self, fs_type): # -> None:
        """Sets the fs_type of this V1RBDVolumeSource.

        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd  # noqa: E501

        :param fs_type: The fs_type of this V1RBDVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def image(self): # -> None:
        """Gets the image of this V1RBDVolumeSource.  # noqa: E501

        image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The image of this V1RBDVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @image.setter
    def image(self, image): # -> None:
        """Sets the image of this V1RBDVolumeSource.

        image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param image: The image of this V1RBDVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def keyring(self): # -> None:
        """Gets the keyring of this V1RBDVolumeSource.  # noqa: E501

        keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The keyring of this V1RBDVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @keyring.setter
    def keyring(self, keyring): # -> None:
        """Sets the keyring of this V1RBDVolumeSource.

        keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param keyring: The keyring of this V1RBDVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def monitors(self): # -> None:
        """Gets the monitors of this V1RBDVolumeSource.  # noqa: E501

        monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The monitors of this V1RBDVolumeSource.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @monitors.setter
    def monitors(self, monitors): # -> None:
        """Sets the monitors of this V1RBDVolumeSource.

        monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param monitors: The monitors of this V1RBDVolumeSource.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def pool(self): # -> None:
        """Gets the pool of this V1RBDVolumeSource.  # noqa: E501

        pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The pool of this V1RBDVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @pool.setter
    def pool(self, pool): # -> None:
        """Sets the pool of this V1RBDVolumeSource.

        pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param pool: The pool of this V1RBDVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def read_only(self): # -> None:
        """Gets the read_only of this V1RBDVolumeSource.  # noqa: E501

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The read_only of this V1RBDVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @read_only.setter
    def read_only(self, read_only): # -> None:
        """Sets the read_only of this V1RBDVolumeSource.

        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param read_only: The read_only of this V1RBDVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def secret_ref(self): # -> None:
        """Gets the secret_ref of this V1RBDVolumeSource.  # noqa: E501


        :return: The secret_ref of this V1RBDVolumeSource.  # noqa: E501
        :rtype: V1LocalObjectReference
        """
        ...
    
    @secret_ref.setter
    def secret_ref(self, secret_ref): # -> None:
        """Sets the secret_ref of this V1RBDVolumeSource.


        :param secret_ref: The secret_ref of this V1RBDVolumeSource.  # noqa: E501
        :type: V1LocalObjectReference
        """
        ...
    
    @property
    def user(self): # -> None:
        """Gets the user of this V1RBDVolumeSource.  # noqa: E501

        user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The user of this V1RBDVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @user.setter
    def user(self, user): # -> None:
        """Sets the user of this V1RBDVolumeSource.

        user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param user: The user of this V1RBDVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


