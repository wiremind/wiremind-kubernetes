"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class V1ConfigMapVolumeSource:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    openapi_types = ...
    attribute_map = ...
    def __init__(self, default_mode=..., items=..., name=..., optional=..., local_vars_configuration=...) -> None:
        """V1ConfigMapVolumeSource - a model defined in OpenAPI"""
        ...
    
    @property
    def default_mode(self): # -> None:
        """Gets the default_mode of this V1ConfigMapVolumeSource.  # noqa: E501

        defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.  # noqa: E501

        :return: The default_mode of this V1ConfigMapVolumeSource.  # noqa: E501
        :rtype: int
        """
        ...
    
    @default_mode.setter
    def default_mode(self, default_mode): # -> None:
        """Sets the default_mode of this V1ConfigMapVolumeSource.

        defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.  # noqa: E501

        :param default_mode: The default_mode of this V1ConfigMapVolumeSource.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def items(self): # -> None:
        """Gets the items of this V1ConfigMapVolumeSource.  # noqa: E501

        items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.  # noqa: E501

        :return: The items of this V1ConfigMapVolumeSource.  # noqa: E501
        :rtype: list[V1KeyToPath]
        """
        ...
    
    @items.setter
    def items(self, items): # -> None:
        """Sets the items of this V1ConfigMapVolumeSource.

        items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.  # noqa: E501

        :param items: The items of this V1ConfigMapVolumeSource.  # noqa: E501
        :type: list[V1KeyToPath]
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this V1ConfigMapVolumeSource.  # noqa: E501

        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :return: The name of this V1ConfigMapVolumeSource.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this V1ConfigMapVolumeSource.

        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :param name: The name of this V1ConfigMapVolumeSource.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def optional(self): # -> None:
        """Gets the optional of this V1ConfigMapVolumeSource.  # noqa: E501

        optional specify whether the ConfigMap or its keys must be defined  # noqa: E501

        :return: The optional of this V1ConfigMapVolumeSource.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @optional.setter
    def optional(self, optional): # -> None:
        """Sets the optional of this V1ConfigMapVolumeSource.

        optional specify whether the ConfigMap or its keys must be defined  # noqa: E501

        :param optional: The optional of this V1ConfigMapVolumeSource.  # noqa: E501
        :type: bool
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


