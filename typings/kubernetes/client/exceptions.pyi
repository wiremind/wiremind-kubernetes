"""
This type stub file was generated by pyright.
"""

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.24
    Generated by: https://openapi-generator.tech
"""
class OpenApiException(Exception):
    """The base exception class for all OpenAPIExceptions"""
    ...


class ApiTypeError(OpenApiException, TypeError):
    def __init__(self, msg, path_to_item=..., valid_classes=..., key_type=...) -> None:
        """ Raises an exception for TypeErrors

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list): a list of keys an indices to get to the
                                 current_item
                                 None if unset
            valid_classes (tuple): the primitive classes that current item
                                   should be an instance of
                                   None if unset
            key_type (bool): False if our value is a value in a dict
                             True if it is a key in a dict
                             False if our item is an item in a list
                             None if unset
        """
        ...
    


class ApiValueError(OpenApiException, ValueError):
    def __init__(self, msg, path_to_item=...) -> None:
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list) the path to the exception in the
                received_data dict. None if unset
        """
        ...
    


class ApiKeyError(OpenApiException, KeyError):
    def __init__(self, msg, path_to_item=...) -> None:
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        ...
    


class ApiException(OpenApiException):
    status: int
    def __init__(self, status=..., reason=..., http_resp=...) -> None:
        ...
    
    def __str__(self) -> str:
        """Custom error messages for exception"""
        ...
    


def render_path(path_to_item): # -> str:
    """Returns a string representation of a path"""
    ...

